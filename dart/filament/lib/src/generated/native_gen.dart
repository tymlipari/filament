// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Memory helpers
  ffi.Pointer<ffi.Void> filament_allocate(
    int bytes,
  ) {
    return _filament_allocate(
      bytes,
    );
  }

  late final _filament_allocatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int64)>>(
          'filament_allocate');
  late final _filament_allocate =
      _filament_allocatePtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  void filament_free(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _filament_free(
      ptr,
    );
  }

  late final _filament_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'filament_free');
  late final _filament_free =
      _filament_freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// Engine
  EngineRef filament_create_engine(
    int backend,
  ) {
    return _filament_create_engine(
      backend,
    );
  }

  late final _filament_create_enginePtr =
      _lookup<ffi.NativeFunction<EngineRef Function(ffi.Int32)>>(
          'filament_create_engine');
  late final _filament_create_engine =
      _filament_create_enginePtr.asFunction<EngineRef Function(int)>();

  void filament_destroy_engine(
    EngineRef instance,
  ) {
    return _filament_destroy_engine(
      instance,
    );
  }

  late final _filament_destroy_enginePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(EngineRef)>>(
          'filament_destroy_engine');
  late final _filament_destroy_engine =
      _filament_destroy_enginePtr.asFunction<void Function(EngineRef)>();

  int filament_engine_get_backend(
    EngineRef instance,
  ) {
    return _filament_engine_get_backend(
      instance,
    );
  }

  late final _filament_engine_get_backendPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(EngineRef)>>(
          'filament_engine_get_backend');
  late final _filament_engine_get_backend =
      _filament_engine_get_backendPtr.asFunction<int Function(EngineRef)>();

  void filament_engine_flush_and_wait(
    EngineRef engine,
  ) {
    return _filament_engine_flush_and_wait(
      engine,
    );
  }

  late final _filament_engine_flush_and_waitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(EngineRef)>>(
          'filament_engine_flush_and_wait');
  late final _filament_engine_flush_and_wait =
      _filament_engine_flush_and_waitPtr.asFunction<void Function(EngineRef)>();

  EntityManagerRef filament_engine_get_entity_manager(
    EngineRef instance,
  ) {
    return _filament_engine_get_entity_manager(
      instance,
    );
  }

  late final _filament_engine_get_entity_managerPtr =
      _lookup<ffi.NativeFunction<EntityManagerRef Function(EngineRef)>>(
          'filament_engine_get_entity_manager');
  late final _filament_engine_get_entity_manager =
      _filament_engine_get_entity_managerPtr
          .asFunction<EntityManagerRef Function(EngineRef)>();

  /// Creates a swap chain against the given surface
  ///
  /// instance - A FILAMENT_HANDLE pointing to an engine instance
  /// surface - the OS surface to create a swap chain against
  /// flags - swap chain creation flags
  ///
  /// Returns a handle to a swap chain instance
  SwapChainRef filament_engine_create_swapchain(
    EngineRef instance,
    ffi.Pointer<ffi.Void> surface,
    int flags,
  ) {
    return _filament_engine_create_swapchain(
      instance,
      surface,
      flags,
    );
  }

  late final _filament_engine_create_swapchainPtr = _lookup<
      ffi.NativeFunction<
          SwapChainRef Function(EngineRef, ffi.Pointer<ffi.Void>,
              ffi.Int64)>>('filament_engine_create_swapchain');
  late final _filament_engine_create_swapchain =
      _filament_engine_create_swapchainPtr.asFunction<
          SwapChainRef Function(EngineRef, ffi.Pointer<ffi.Void>, int)>();

  SwapChainRef filament_engine_create_swapchain_headless(
    EngineRef instance,
    int width,
    int height,
    int flags,
  ) {
    return _filament_engine_create_swapchain_headless(
      instance,
      width,
      height,
      flags,
    );
  }

  late final _filament_engine_create_swapchain_headlessPtr = _lookup<
      ffi.NativeFunction<
          SwapChainRef Function(EngineRef, ffi.Int32, ffi.Int32,
              ffi.Int64)>>('filament_engine_create_swapchain_headless');
  late final _filament_engine_create_swapchain_headless =
      _filament_engine_create_swapchain_headlessPtr
          .asFunction<SwapChainRef Function(EngineRef, int, int, int)>();

  void filament_destroy_swapchain(
    SwapChainRef instance,
  ) {
    return _filament_destroy_swapchain(
      instance,
    );
  }

  late final _filament_destroy_swapchainPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SwapChainRef)>>(
          'filament_destroy_swapchain');
  late final _filament_destroy_swapchain =
      _filament_destroy_swapchainPtr.asFunction<void Function(SwapChainRef)>();

  /// View
  ViewRef filament_engine_create_view(
    EngineRef engine,
  ) {
    return _filament_engine_create_view(
      engine,
    );
  }

  late final _filament_engine_create_viewPtr =
      _lookup<ffi.NativeFunction<ViewRef Function(EngineRef)>>(
          'filament_engine_create_view');
  late final _filament_engine_create_view =
      _filament_engine_create_viewPtr.asFunction<ViewRef Function(EngineRef)>();

  void filament_destroy_view(
    ViewRef view,
  ) {
    return _filament_destroy_view(
      view,
    );
  }

  late final _filament_destroy_viewPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ViewRef)>>(
          'filament_destroy_view');
  late final _filament_destroy_view =
      _filament_destroy_viewPtr.asFunction<void Function(ViewRef)>();

  RendererRef filament_engine_create_renderer(
    EngineRef engine,
  ) {
    return _filament_engine_create_renderer(
      engine,
    );
  }

  late final _filament_engine_create_rendererPtr =
      _lookup<ffi.NativeFunction<RendererRef Function(EngineRef)>>(
          'filament_engine_create_renderer');
  late final _filament_engine_create_renderer =
      _filament_engine_create_rendererPtr
          .asFunction<RendererRef Function(EngineRef)>();

  void filament_destroy_renderer(
    RendererRef renderer,
  ) {
    return _filament_destroy_renderer(
      renderer,
    );
  }

  late final _filament_destroy_rendererPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RendererRef)>>(
          'filament_destroy_renderer');
  late final _filament_destroy_renderer =
      _filament_destroy_rendererPtr.asFunction<void Function(RendererRef)>();

  void filament_renderer_set_display_info(
    RendererRef renderer,
    filament_display_info_t info,
  ) {
    return _filament_renderer_set_display_info(
      renderer,
      info,
    );
  }

  late final _filament_renderer_set_display_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RendererRef,
              filament_display_info_t)>>('filament_renderer_set_display_info');
  late final _filament_renderer_set_display_info =
      _filament_renderer_set_display_infoPtr
          .asFunction<void Function(RendererRef, filament_display_info_t)>();

  filament_display_info_t filament_renderer_get_display_info(
    RendererRef renderer,
  ) {
    return _filament_renderer_get_display_info(
      renderer,
    );
  }

  late final _filament_renderer_get_display_infoPtr = _lookup<
          ffi.NativeFunction<filament_display_info_t Function(RendererRef)>>(
      'filament_renderer_get_display_info');
  late final _filament_renderer_get_display_info =
      _filament_renderer_get_display_infoPtr
          .asFunction<filament_display_info_t Function(RendererRef)>();

  void filament_renderer_set_framerate_options(
    RendererRef renderer,
    filament_framerate_options_t options,
  ) {
    return _filament_renderer_set_framerate_options(
      renderer,
      options,
    );
  }

  late final _filament_renderer_set_framerate_optionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(RendererRef, filament_framerate_options_t)>>(
      'filament_renderer_set_framerate_options');
  late final _filament_renderer_set_framerate_options =
      _filament_renderer_set_framerate_optionsPtr.asFunction<
          void Function(RendererRef, filament_framerate_options_t)>();

  filament_framerate_options_t filament_renderer_get_framerate_options(
    RendererRef renderer,
  ) {
    return _filament_renderer_get_framerate_options(
      renderer,
    );
  }

  late final _filament_renderer_get_framerate_optionsPtr = _lookup<
      ffi.NativeFunction<
          filament_framerate_options_t Function(
              RendererRef)>>('filament_renderer_get_framerate_options');
  late final _filament_renderer_get_framerate_options =
      _filament_renderer_get_framerate_optionsPtr
          .asFunction<filament_framerate_options_t Function(RendererRef)>();

  void filament_renderer_set_clear_options(
    RendererRef renderer,
    filament_clear_options_t options,
  ) {
    return _filament_renderer_set_clear_options(
      renderer,
      options,
    );
  }

  late final _filament_renderer_set_clear_optionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(RendererRef, filament_clear_options_t)>>(
      'filament_renderer_set_clear_options');
  late final _filament_renderer_set_clear_options =
      _filament_renderer_set_clear_optionsPtr
          .asFunction<void Function(RendererRef, filament_clear_options_t)>();

  filament_clear_options_t filament_renderer_get_clear_options(
    RendererRef renderer,
  ) {
    return _filament_renderer_get_clear_options(
      renderer,
    );
  }

  late final _filament_renderer_get_clear_optionsPtr = _lookup<
          ffi.NativeFunction<filament_clear_options_t Function(RendererRef)>>(
      'filament_renderer_get_clear_options');
  late final _filament_renderer_get_clear_options =
      _filament_renderer_get_clear_optionsPtr
          .asFunction<filament_clear_options_t Function(RendererRef)>();

  int filament_renderer_begin_frame(
    RendererRef renderer,
    SwapChainRef swapChain,
    int frameTimeNanos,
  ) {
    return _filament_renderer_begin_frame(
      renderer,
      swapChain,
      frameTimeNanos,
    );
  }

  late final _filament_renderer_begin_framePtr = _lookup<
      ffi.NativeFunction<
          bool Function(RendererRef, SwapChainRef,
              ffi.Int64)>>('filament_renderer_begin_frame');
  late final _filament_renderer_begin_frame = _filament_renderer_begin_framePtr
      .asFunction<int Function(RendererRef, SwapChainRef, int)>();

  void filament_renderer_end_frame(
    RendererRef renderer,
  ) {
    return _filament_renderer_end_frame(
      renderer,
    );
  }

  late final _filament_renderer_end_framePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RendererRef)>>(
          'filament_renderer_end_frame');
  late final _filament_renderer_end_frame =
      _filament_renderer_end_framePtr.asFunction<void Function(RendererRef)>();

  void filament_renderer_render(
    RendererRef renderer,
    ViewRef view,
  ) {
    return _filament_renderer_render(
      renderer,
      view,
    );
  }

  late final _filament_renderer_renderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RendererRef, ViewRef)>>(
          'filament_renderer_render');
  late final _filament_renderer_render = _filament_renderer_renderPtr
      .asFunction<void Function(RendererRef, ViewRef)>();

  void filament_renderer_render_standalone_view(
    RendererRef renderer,
    ViewRef view,
  ) {
    return _filament_renderer_render_standalone_view(
      renderer,
      view,
    );
  }

  late final _filament_renderer_render_standalone_viewPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RendererRef, ViewRef)>>(
          'filament_renderer_render_standalone_view');
  late final _filament_renderer_render_standalone_view =
      _filament_renderer_render_standalone_viewPtr
          .asFunction<void Function(RendererRef, ViewRef)>();

  void filament_renderer_copy_frame(
    RendererRef renderer,
    SwapChainRef dest,
    filament_viewport_t destViewport,
    filament_viewport_t srcViewport,
    int flags,
  ) {
    return _filament_renderer_copy_frame(
      renderer,
      dest,
      destViewport,
      srcViewport,
      flags,
    );
  }

  late final _filament_renderer_copy_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RendererRef, SwapChainRef, filament_viewport_t,
              filament_viewport_t, ffi.Int32)>>('filament_renderer_copy_frame');
  late final _filament_renderer_copy_frame =
      _filament_renderer_copy_framePtr.asFunction<
          void Function(RendererRef, SwapChainRef, filament_viewport_t,
              filament_viewport_t, int)>();

  void filament_renderer_reset_user_time(
    RendererRef renderer,
  ) {
    return _filament_renderer_reset_user_time(
      renderer,
    );
  }

  late final _filament_renderer_reset_user_timePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RendererRef)>>(
          'filament_renderer_reset_user_time');
  late final _filament_renderer_reset_user_time =
      _filament_renderer_reset_user_timePtr
          .asFunction<void Function(RendererRef)>();

  /// Camera
  CameraRef filament_engine_create_camera(
    EngineRef engine,
    int entity,
  ) {
    return _filament_engine_create_camera(
      engine,
      entity,
    );
  }

  late final _filament_engine_create_cameraPtr =
      _lookup<ffi.NativeFunction<CameraRef Function(EngineRef, ffi.Int32)>>(
          'filament_engine_create_camera');
  late final _filament_engine_create_camera = _filament_engine_create_cameraPtr
      .asFunction<CameraRef Function(EngineRef, int)>();

  CameraRef filament_engine_get_camera_component(
    EngineRef engine,
    int entity,
  ) {
    return _filament_engine_get_camera_component(
      engine,
      entity,
    );
  }

  late final _filament_engine_get_camera_componentPtr =
      _lookup<ffi.NativeFunction<CameraRef Function(EngineRef, ffi.Int32)>>(
          'filament_engine_get_camera_component');
  late final _filament_engine_get_camera_component =
      _filament_engine_get_camera_componentPtr
          .asFunction<CameraRef Function(EngineRef, int)>();

  void filament_destroy_camera_component(
    int entity,
  ) {
    return _filament_destroy_camera_component(
      entity,
    );
  }

  late final _filament_destroy_camera_componentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'filament_destroy_camera_component');
  late final _filament_destroy_camera_component =
      _filament_destroy_camera_componentPtr.asFunction<void Function(int)>();

  void filament_camera_set_projection(
    CameraRef camera,
    int projectionKind,
    double left,
    double right,
    double bottom,
    double top,
    double near,
    double far,
  ) {
    return _filament_camera_set_projection(
      camera,
      projectionKind,
      left,
      right,
      bottom,
      top,
      near,
      far,
    );
  }

  late final _filament_camera_set_projectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CameraRef,
              ffi.Int32,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('filament_camera_set_projection');
  late final _filament_camera_set_projection =
      _filament_camera_set_projectionPtr.asFunction<
          void Function(CameraRef, int, double, double, double, double, double,
              double)>();

  void filament_camera_set_projection_fov(
    CameraRef camera,
    double fovInDegrees,
    double aspect,
    double near,
    double far,
    int direction,
  ) {
    return _filament_camera_set_projection_fov(
      camera,
      fovInDegrees,
      aspect,
      near,
      far,
      direction,
    );
  }

  late final _filament_camera_set_projection_fovPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CameraRef, ffi.Double, ffi.Double, ffi.Double,
              ffi.Double, ffi.Int32)>>('filament_camera_set_projection_fov');
  late final _filament_camera_set_projection_fov =
      _filament_camera_set_projection_fovPtr.asFunction<
          void Function(CameraRef, double, double, double, double, int)>();

  void filament_camera_set_projection_lens(
    CameraRef camera,
    double focalLength,
    double aspect,
    double near,
    double far,
  ) {
    return _filament_camera_set_projection_lens(
      camera,
      focalLength,
      aspect,
      near,
      far,
    );
  }

  late final _filament_camera_set_projection_lensPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CameraRef, ffi.Double, ffi.Double, ffi.Double,
              ffi.Double)>>('filament_camera_set_projection_lens');
  late final _filament_camera_set_projection_lens =
      _filament_camera_set_projection_lensPtr.asFunction<
          void Function(CameraRef, double, double, double, double)>();

  void filament_camera_set_scaling(
    CameraRef camera,
    double scalingX,
    double scalingY,
  ) {
    return _filament_camera_set_scaling(
      camera,
      scalingX,
      scalingY,
    );
  }

  late final _filament_camera_set_scalingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CameraRef, ffi.Double,
              ffi.Double)>>('filament_camera_set_scaling');
  late final _filament_camera_set_scaling = _filament_camera_set_scalingPtr
      .asFunction<void Function(CameraRef, double, double)>();

  void filament_camera_set_shift(
    CameraRef camera,
    double shiftX,
    double shiftY,
  ) {
    return _filament_camera_set_shift(
      camera,
      shiftX,
      shiftY,
    );
  }

  late final _filament_camera_set_shiftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CameraRef, ffi.Double, ffi.Double)>>('filament_camera_set_shift');
  late final _filament_camera_set_shift = _filament_camera_set_shiftPtr
      .asFunction<void Function(CameraRef, double, double)>();

  void filament_camera_set_lookat(
    CameraRef camera,
    double eyeX,
    double eyeY,
    double eyeZ,
    double centerX,
    double centerY,
    double centerZ,
    double upX,
    double upY,
    double upZ,
  ) {
    return _filament_camera_set_lookat(
      camera,
      eyeX,
      eyeY,
      eyeZ,
      centerX,
      centerY,
      centerZ,
      upX,
      upY,
      upZ,
    );
  }

  late final _filament_camera_set_lookatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CameraRef,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('filament_camera_set_lookat');
  late final _filament_camera_set_lookat =
      _filament_camera_set_lookatPtr.asFunction<
          void Function(CameraRef, double, double, double, double, double,
              double, double, double, double)>();

  void filament_camera_set_exposure(
    CameraRef camera,
    double aperture,
    double shutterSpeed,
    double sensitivity,
  ) {
    return _filament_camera_set_exposure(
      camera,
      aperture,
      shutterSpeed,
      sensitivity,
    );
  }

  late final _filament_camera_set_exposurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CameraRef, ffi.Float, ffi.Float,
              ffi.Float)>>('filament_camera_set_exposure');
  late final _filament_camera_set_exposure = _filament_camera_set_exposurePtr
      .asFunction<void Function(CameraRef, double, double, double)>();

  double filament_camera_get_near(
    CameraRef camera,
  ) {
    return _filament_camera_get_near(
      camera,
    );
  }

  late final _filament_camera_get_nearPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(CameraRef)>>(
          'filament_camera_get_near');
  late final _filament_camera_get_near =
      _filament_camera_get_nearPtr.asFunction<double Function(CameraRef)>();

  double filament_camera_get_culling_far(
    CameraRef camera,
  ) {
    return _filament_camera_get_culling_far(
      camera,
    );
  }

  late final _filament_camera_get_culling_farPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(CameraRef)>>(
          'filament_camera_get_culling_far');
  late final _filament_camera_get_culling_far =
      _filament_camera_get_culling_farPtr
          .asFunction<double Function(CameraRef)>();

  void filament_camera_get_projection_matrix(
    CameraRef camera,
    ffi.Pointer<Matrix4x4> result,
  ) {
    return _filament_camera_get_projection_matrix(
      camera,
      result,
    );
  }

  late final _filament_camera_get_projection_matrixPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CameraRef, ffi.Pointer<Matrix4x4>)>>(
      'filament_camera_get_projection_matrix');
  late final _filament_camera_get_projection_matrix =
      _filament_camera_get_projection_matrixPtr
          .asFunction<void Function(CameraRef, ffi.Pointer<Matrix4x4>)>();

  void filament_camera_get_culling_projection_matrix(
    CameraRef camera,
    ffi.Pointer<Matrix4x4> result,
  ) {
    return _filament_camera_get_culling_projection_matrix(
      camera,
      result,
    );
  }

  late final _filament_camera_get_culling_projection_matrixPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CameraRef, ffi.Pointer<Matrix4x4>)>>(
      'filament_camera_get_culling_projection_matrix');
  late final _filament_camera_get_culling_projection_matrix =
      _filament_camera_get_culling_projection_matrixPtr
          .asFunction<void Function(CameraRef, ffi.Pointer<Matrix4x4>)>();

  Vector4 filament_camera_get_scaling(
    CameraRef camera,
  ) {
    return _filament_camera_get_scaling(
      camera,
    );
  }

  late final _filament_camera_get_scalingPtr =
      _lookup<ffi.NativeFunction<Vector4 Function(CameraRef)>>(
          'filament_camera_get_scaling');
  late final _filament_camera_get_scaling =
      _filament_camera_get_scalingPtr.asFunction<Vector4 Function(CameraRef)>();

  Vector3 filament_camera_get_position(
    CameraRef camera,
  ) {
    return _filament_camera_get_position(
      camera,
    );
  }

  late final _filament_camera_get_positionPtr =
      _lookup<ffi.NativeFunction<Vector3 Function(CameraRef)>>(
          'filament_camera_get_position');
  late final _filament_camera_get_position = _filament_camera_get_positionPtr
      .asFunction<Vector3 Function(CameraRef)>();

  Vector3 filament_camera_get_left_vector(
    CameraRef camera,
  ) {
    return _filament_camera_get_left_vector(
      camera,
    );
  }

  late final _filament_camera_get_left_vectorPtr =
      _lookup<ffi.NativeFunction<Vector3 Function(CameraRef)>>(
          'filament_camera_get_left_vector');
  late final _filament_camera_get_left_vector =
      _filament_camera_get_left_vectorPtr
          .asFunction<Vector3 Function(CameraRef)>();

  Vector3 filament_camera_get_up_vector(
    CameraRef camera,
  ) {
    return _filament_camera_get_up_vector(
      camera,
    );
  }

  late final _filament_camera_get_up_vectorPtr =
      _lookup<ffi.NativeFunction<Vector3 Function(CameraRef)>>(
          'filament_camera_get_up_vector');
  late final _filament_camera_get_up_vector = _filament_camera_get_up_vectorPtr
      .asFunction<Vector3 Function(CameraRef)>();

  Vector3 filament_camera_get_forward_vector(
    CameraRef camera,
  ) {
    return _filament_camera_get_forward_vector(
      camera,
    );
  }

  late final _filament_camera_get_forward_vectorPtr =
      _lookup<ffi.NativeFunction<Vector3 Function(CameraRef)>>(
          'filament_camera_get_forward_vector');
  late final _filament_camera_get_forward_vector =
      _filament_camera_get_forward_vectorPtr
          .asFunction<Vector3 Function(CameraRef)>();

  double filament_camera_get_aperture(
    CameraRef camera,
  ) {
    return _filament_camera_get_aperture(
      camera,
    );
  }

  late final _filament_camera_get_aperturePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(CameraRef)>>(
          'filament_camera_get_aperture');
  late final _filament_camera_get_aperture =
      _filament_camera_get_aperturePtr.asFunction<double Function(CameraRef)>();

  double filament_camera_get_shutter_speed(
    CameraRef camera,
  ) {
    return _filament_camera_get_shutter_speed(
      camera,
    );
  }

  late final _filament_camera_get_shutter_speedPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(CameraRef)>>(
          'filament_camera_get_shutter_speed');
  late final _filament_camera_get_shutter_speed =
      _filament_camera_get_shutter_speedPtr
          .asFunction<double Function(CameraRef)>();

  double filament_camera_get_sensitivity(
    CameraRef camera,
  ) {
    return _filament_camera_get_sensitivity(
      camera,
    );
  }

  late final _filament_camera_get_sensitivityPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(CameraRef)>>(
          'filament_camera_get_sensitivity');
  late final _filament_camera_get_sensitivity =
      _filament_camera_get_sensitivityPtr
          .asFunction<double Function(CameraRef)>();

  double filament_camera_get_focal_length(
    CameraRef camera,
  ) {
    return _filament_camera_get_focal_length(
      camera,
    );
  }

  late final _filament_camera_get_focal_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(CameraRef)>>(
          'filament_camera_get_focal_length');
  late final _filament_camera_get_focal_length =
      _filament_camera_get_focal_lengthPtr
          .asFunction<double Function(CameraRef)>();

  void filament_camera_set_focus_distance(
    CameraRef camera,
    double distance,
  ) {
    return _filament_camera_set_focus_distance(
      camera,
      distance,
    );
  }

  late final _filament_camera_set_focus_distancePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CameraRef, ffi.Float)>>(
          'filament_camera_set_focus_distance');
  late final _filament_camera_set_focus_distance =
      _filament_camera_set_focus_distancePtr
          .asFunction<void Function(CameraRef, double)>();

  double filament_camera_get_focus_distance(
    CameraRef camera,
  ) {
    return _filament_camera_get_focus_distance(
      camera,
    );
  }

  late final _filament_camera_get_focus_distancePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(CameraRef)>>(
          'filament_camera_get_focus_distance');
  late final _filament_camera_get_focus_distance =
      _filament_camera_get_focus_distancePtr
          .asFunction<double Function(CameraRef)>();

  double filament_camera_compute_effective_focal_length(
    double focalLength,
    double focusDistance,
  ) {
    return _filament_camera_compute_effective_focal_length(
      focalLength,
      focusDistance,
    );
  }

  late final _filament_camera_compute_effective_focal_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'filament_camera_compute_effective_focal_length');
  late final _filament_camera_compute_effective_focal_length =
      _filament_camera_compute_effective_focal_lengthPtr
          .asFunction<double Function(double, double)>();

  double filament_camera_compute_effective_fov(
    double fovInDegrees,
    double focusDistance,
  ) {
    return _filament_camera_compute_effective_fov(
      fovInDegrees,
      focusDistance,
    );
  }

  late final _filament_camera_compute_effective_fovPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'filament_camera_compute_effective_fov');
  late final _filament_camera_compute_effective_fov =
      _filament_camera_compute_effective_fovPtr
          .asFunction<double Function(double, double)>();

  /// Scene
  SceneRef filament_engine_create_scene(
    EngineRef engine,
  ) {
    return _filament_engine_create_scene(
      engine,
    );
  }

  late final _filament_engine_create_scenePtr =
      _lookup<ffi.NativeFunction<SceneRef Function(EngineRef)>>(
          'filament_engine_create_scene');
  late final _filament_engine_create_scene = _filament_engine_create_scenePtr
      .asFunction<SceneRef Function(EngineRef)>();

  void filament_destroy_scene(
    SceneRef scene,
  ) {
    return _filament_destroy_scene(
      scene,
    );
  }

  late final _filament_destroy_scenePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SceneRef)>>(
          'filament_destroy_scene');
  late final _filament_destroy_scene =
      _filament_destroy_scenePtr.asFunction<void Function(SceneRef)>();

  void filament_scene_set_skybox(
    SceneRef scene,
    SkyboxRef skybox,
  ) {
    return _filament_scene_set_skybox(
      scene,
      skybox,
    );
  }

  late final _filament_scene_set_skyboxPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SceneRef, SkyboxRef)>>(
          'filament_scene_set_skybox');
  late final _filament_scene_set_skybox = _filament_scene_set_skyboxPtr
      .asFunction<void Function(SceneRef, SkyboxRef)>();

  void filament_scene_set_indirect_light(
    SceneRef scene,
    IndirectLightRef light,
  ) {
    return _filament_scene_set_indirect_light(
      scene,
      light,
    );
  }

  late final _filament_scene_set_indirect_lightPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(SceneRef, IndirectLightRef)>>(
      'filament_scene_set_indirect_light');
  late final _filament_scene_set_indirect_light =
      _filament_scene_set_indirect_lightPtr
          .asFunction<void Function(SceneRef, IndirectLightRef)>();

  void filament_scene_add_entity(
    SceneRef scene,
    int entity,
  ) {
    return _filament_scene_add_entity(
      scene,
      entity,
    );
  }

  late final _filament_scene_add_entityPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SceneRef, ffi.Int32)>>(
          'filament_scene_add_entity');
  late final _filament_scene_add_entity =
      _filament_scene_add_entityPtr.asFunction<void Function(SceneRef, int)>();

  void filament_scene_remove_entity(
    SceneRef scene,
    int entity,
  ) {
    return _filament_scene_remove_entity(
      scene,
      entity,
    );
  }

  late final _filament_scene_remove_entityPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SceneRef, ffi.Int32)>>(
          'filament_scene_remove_entity');
  late final _filament_scene_remove_entity = _filament_scene_remove_entityPtr
      .asFunction<void Function(SceneRef, int)>();

  int filament_scene_get_renderable_count(
    SceneRef scene,
  ) {
    return _filament_scene_get_renderable_count(
      scene,
    );
  }

  late final _filament_scene_get_renderable_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(SceneRef)>>(
          'filament_scene_get_renderable_count');
  late final _filament_scene_get_renderable_count =
      _filament_scene_get_renderable_countPtr
          .asFunction<int Function(SceneRef)>();

  int filament_scene_get_light_count(
    SceneRef scene,
  ) {
    return _filament_scene_get_light_count(
      scene,
    );
  }

  late final _filament_scene_get_light_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(SceneRef)>>(
          'filament_scene_get_light_count');
  late final _filament_scene_get_light_count =
      _filament_scene_get_light_countPtr.asFunction<int Function(SceneRef)>();

  /// Fence
  FenceRef filament_engine_create_fence(
    EngineRef engine,
  ) {
    return _filament_engine_create_fence(
      engine,
    );
  }

  late final _filament_engine_create_fencePtr =
      _lookup<ffi.NativeFunction<FenceRef Function(EngineRef)>>(
          'filament_engine_create_fence');
  late final _filament_engine_create_fence = _filament_engine_create_fencePtr
      .asFunction<FenceRef Function(EngineRef)>();

  void filament_destroy_fence(
    FenceRef fence,
  ) {
    return _filament_destroy_fence(
      fence,
    );
  }

  late final _filament_destroy_fencePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FenceRef)>>(
          'filament_destroy_fence');
  late final _filament_destroy_fence =
      _filament_destroy_fencePtr.asFunction<void Function(FenceRef)>();

  int filament_fence_wait(
    FenceRef fence,
    int mode,
    int timeoutMS,
  ) {
    return _filament_fence_wait(
      fence,
      mode,
      timeoutMS,
    );
  }

  late final _filament_fence_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              FenceRef, ffi.Int32, ffi.Int64)>>('filament_fence_wait');
  late final _filament_fence_wait =
      _filament_fence_waitPtr.asFunction<int Function(FenceRef, int, int)>();

  BufferObjectBuilderRef filament_create_buffer_builder() {
    return _filament_create_buffer_builder();
  }

  late final _filament_create_buffer_builderPtr =
      _lookup<ffi.NativeFunction<BufferObjectBuilderRef Function()>>(
          'filament_create_buffer_builder');
  late final _filament_create_buffer_builder =
      _filament_create_buffer_builderPtr
          .asFunction<BufferObjectBuilderRef Function()>();

  BufferObjectRef filament_engine_create_buffer_object(
    EngineRef engine,
    int byteCount,
    int bindingType,
  ) {
    return _filament_engine_create_buffer_object(
      engine,
      byteCount,
      bindingType,
    );
  }

  late final _filament_engine_create_buffer_objectPtr = _lookup<
      ffi.NativeFunction<
          BufferObjectRef Function(EngineRef, ffi.Int32,
              ffi.Int32)>>('filament_engine_create_buffer_object');
  late final _filament_engine_create_buffer_object =
      _filament_engine_create_buffer_objectPtr
          .asFunction<BufferObjectRef Function(EngineRef, int, int)>();

  ColorGradingRef filament_engine_create_color_grading(
    EngineRef engine,
  ) {
    return _filament_engine_create_color_grading(
      engine,
    );
  }

  late final _filament_engine_create_color_gradingPtr =
      _lookup<ffi.NativeFunction<ColorGradingRef Function(EngineRef)>>(
          'filament_engine_create_color_grading');
  late final _filament_engine_create_color_grading =
      _filament_engine_create_color_gradingPtr
          .asFunction<ColorGradingRef Function(EngineRef)>();

  void filament_destroy_color_grading(
    ColorGradingRef colorGrading,
  ) {
    return _filament_destroy_color_grading(
      colorGrading,
    );
  }

  late final _filament_destroy_color_gradingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ColorGradingRef)>>(
          'filament_destroy_color_grading');
  late final _filament_destroy_color_grading =
      _filament_destroy_color_gradingPtr
          .asFunction<void Function(ColorGradingRef)>();

  /// Color
  Vector3 filament_color_cct(
    double temperature,
  ) {
    return _filament_color_cct(
      temperature,
    );
  }

  late final _filament_color_cctPtr =
      _lookup<ffi.NativeFunction<Vector3 Function(ffi.Float)>>(
          'filament_color_cct');
  late final _filament_color_cct =
      _filament_color_cctPtr.asFunction<Vector3 Function(double)>();

  Vector3 filament_color_illuminantD(
    double temperature,
  ) {
    return _filament_color_illuminantD(
      temperature,
    );
  }

  late final _filament_color_illuminantDPtr =
      _lookup<ffi.NativeFunction<Vector3 Function(ffi.Float)>>(
          'filament_color_illuminantD');
  late final _filament_color_illuminantD =
      _filament_color_illuminantDPtr.asFunction<Vector3 Function(double)>();

  /// EntityManager
  EntityManagerRef filament_get_entity_manager() {
    return _filament_get_entity_manager();
  }

  late final _filament_get_entity_managerPtr =
      _lookup<ffi.NativeFunction<EntityManagerRef Function()>>(
          'filament_get_entity_manager');
  late final _filament_get_entity_manager =
      _filament_get_entity_managerPtr.asFunction<EntityManagerRef Function()>();

  int filament_entity_manager_create_entity(
    EntityManagerRef manager,
  ) {
    return _filament_entity_manager_create_entity(
      manager,
    );
  }

  late final _filament_entity_manager_create_entityPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(EntityManagerRef)>>(
          'filament_entity_manager_create_entity');
  late final _filament_entity_manager_create_entity =
      _filament_entity_manager_create_entityPtr
          .asFunction<int Function(EntityManagerRef)>();

  void filament_entity_manager_destroy_entity(
    int entityId,
  ) {
    return _filament_entity_manager_destroy_entity(
      entityId,
    );
  }

  late final _filament_entity_manager_destroy_entityPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'filament_entity_manager_destroy_entity');
  late final _filament_entity_manager_destroy_entity =
      _filament_entity_manager_destroy_entityPtr
          .asFunction<void Function(int)>();

  int filament_entity_manager_entity_is_alive(
    int entityId,
  ) {
    return _filament_entity_manager_entity_is_alive(
      entityId,
    );
  }

  late final _filament_entity_manager_entity_is_alivePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'filament_entity_manager_entity_is_alive');
  late final _filament_entity_manager_entity_is_alive =
      _filament_entity_manager_entity_is_alivePtr
          .asFunction<int Function(int)>();

  /// IndexBuffer
  IndexBufferRef filament_engine_create_index_buffer(
    EngineRef engine,
    int indexCount,
    int indexType,
  ) {
    return _filament_engine_create_index_buffer(
      engine,
      indexCount,
      indexType,
    );
  }

  late final _filament_engine_create_index_bufferPtr = _lookup<
      ffi.NativeFunction<
          IndexBufferRef Function(EngineRef, ffi.Int32,
              ffi.Int32)>>('filament_engine_create_index_buffer');
  late final _filament_engine_create_index_buffer =
      _filament_engine_create_index_bufferPtr
          .asFunction<IndexBufferRef Function(EngineRef, int, int)>();

  int filament_index_buffer_get_index_count(
    IndexBufferRef buffer,
  ) {
    return _filament_index_buffer_get_index_count(
      buffer,
    );
  }

  late final _filament_index_buffer_get_index_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(IndexBufferRef)>>(
          'filament_index_buffer_get_index_count');
  late final _filament_index_buffer_get_index_count =
      _filament_index_buffer_get_index_countPtr
          .asFunction<int Function(IndexBufferRef)>();

  void filament_index_buffer_set_buffer(
    EngineRef engine,
    IndexBufferRef buffer,
    int destOffsetInBytes,
    int count,
  ) {
    return _filament_index_buffer_set_buffer(
      engine,
      buffer,
      destOffsetInBytes,
      count,
    );
  }

  late final _filament_index_buffer_set_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(EngineRef, IndexBufferRef, ffi.Int32,
              ffi.Int32)>>('filament_index_buffer_set_buffer');
  late final _filament_index_buffer_set_buffer =
      _filament_index_buffer_set_bufferPtr
          .asFunction<void Function(EngineRef, IndexBufferRef, int, int)>();

  /// IndirectLight
  IndirectLightRef filament_engine_create_indirect_light(
    EngineRef engine,
    TextureRef cubeMap,
    int irradianceBands,
    ffi.Pointer<ffi.Float> irradianceSh,
    int irradianceShCount,
    int radianceBands,
    ffi.Pointer<ffi.Float> radianceSh,
    int radianceShCount,
    double envIntensity,
    ffi.Pointer<Matrix3x3> rotation,
  ) {
    return _filament_engine_create_indirect_light(
      engine,
      cubeMap,
      irradianceBands,
      irradianceSh,
      irradianceShCount,
      radianceBands,
      radianceSh,
      radianceShCount,
      envIntensity,
      rotation,
    );
  }

  late final _filament_engine_create_indirect_lightPtr = _lookup<
          ffi.NativeFunction<
              IndirectLightRef Function(
                  EngineRef,
                  TextureRef,
                  ffi.Int32,
                  ffi.Pointer<ffi.Float>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Float>,
                  ffi.Int32,
                  ffi.Float,
                  ffi.Pointer<Matrix3x3>)>>(
      'filament_engine_create_indirect_light');
  late final _filament_engine_create_indirect_light =
      _filament_engine_create_indirect_lightPtr.asFunction<
          IndirectLightRef Function(
              EngineRef,
              TextureRef,
              int,
              ffi.Pointer<ffi.Float>,
              int,
              int,
              ffi.Pointer<ffi.Float>,
              int,
              double,
              ffi.Pointer<Matrix3x3>)>();

  double filament_indirect_light_get_intensity(
    IndirectLightRef light,
  ) {
    return _filament_indirect_light_get_intensity(
      light,
    );
  }

  late final _filament_indirect_light_get_intensityPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(IndirectLightRef)>>(
          'filament_indirect_light_get_intensity');
  late final _filament_indirect_light_get_intensity =
      _filament_indirect_light_get_intensityPtr
          .asFunction<double Function(IndirectLightRef)>();

  void filament_indirect_light_set_intensity(
    IndirectLightRef light,
    double intensity,
  ) {
    return _filament_indirect_light_set_intensity(
      light,
      intensity,
    );
  }

  late final _filament_indirect_light_set_intensityPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(IndirectLightRef, ffi.Float)>>(
      'filament_indirect_light_set_intensity');
  late final _filament_indirect_light_set_intensity =
      _filament_indirect_light_set_intensityPtr
          .asFunction<void Function(IndirectLightRef, double)>();

  void filament_indirect_light_get_rotation(
    IndirectLightRef light,
    ffi.Pointer<Matrix3x3> result,
  ) {
    return _filament_indirect_light_get_rotation(
      light,
      result,
    );
  }

  late final _filament_indirect_light_get_rotationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(IndirectLightRef,
              ffi.Pointer<Matrix3x3>)>>('filament_indirect_light_get_rotation');
  late final _filament_indirect_light_get_rotation =
      _filament_indirect_light_get_rotationPtr.asFunction<
          void Function(IndirectLightRef, ffi.Pointer<Matrix3x3>)>();

  void filament_indirect_light_set_rotation(
    IndirectLightRef light,
    ffi.Pointer<Matrix3x3> rotation,
  ) {
    return _filament_indirect_light_set_rotation(
      light,
      rotation,
    );
  }

  late final _filament_indirect_light_set_rotationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(IndirectLightRef,
              ffi.Pointer<Matrix3x3>)>>('filament_indirect_light_set_rotation');
  late final _filament_indirect_light_set_rotation =
      _filament_indirect_light_set_rotationPtr.asFunction<
          void Function(IndirectLightRef, ffi.Pointer<Matrix3x3>)>();

  TextureRef filament_indirect_light_get_reflections_texture(
    IndirectLightRef light,
  ) {
    return _filament_indirect_light_get_reflections_texture(
      light,
    );
  }

  late final _filament_indirect_light_get_reflections_texturePtr =
      _lookup<ffi.NativeFunction<TextureRef Function(IndirectLightRef)>>(
          'filament_indirect_light_get_reflections_texture');
  late final _filament_indirect_light_get_reflections_texture =
      _filament_indirect_light_get_reflections_texturePtr
          .asFunction<TextureRef Function(IndirectLightRef)>();

  TextureRef filament_indirect_light_get_irradiance_texture(
    IndirectLightRef light,
  ) {
    return _filament_indirect_light_get_irradiance_texture(
      light,
    );
  }

  late final _filament_indirect_light_get_irradiance_texturePtr =
      _lookup<ffi.NativeFunction<TextureRef Function(IndirectLightRef)>>(
          'filament_indirect_light_get_irradiance_texture');
  late final _filament_indirect_light_get_irradiance_texture =
      _filament_indirect_light_get_irradiance_texturePtr
          .asFunction<TextureRef Function(IndirectLightRef)>();

  Vector3 filament_indirect_light_get_direction_estimate(
    ffi.Pointer<ffi.Float> sh,
    int shCount,
    Vector3 direction,
  ) {
    return _filament_indirect_light_get_direction_estimate(
      sh,
      shCount,
      direction,
    );
  }

  late final _filament_indirect_light_get_direction_estimatePtr = _lookup<
      ffi.NativeFunction<
          Vector3 Function(ffi.Pointer<ffi.Float>, ffi.Int32,
              Vector3)>>('filament_indirect_light_get_direction_estimate');
  late final _filament_indirect_light_get_direction_estimate =
      _filament_indirect_light_get_direction_estimatePtr
          .asFunction<Vector3 Function(ffi.Pointer<ffi.Float>, int, Vector3)>();

  Vector4 filament_indirect_light_get_color_estimate(
    Vector4 colorIntensity,
    ffi.Pointer<ffi.Float> sh,
    int shCount,
    double x,
    double y,
    double z,
  ) {
    return _filament_indirect_light_get_color_estimate(
      colorIntensity,
      sh,
      shCount,
      x,
      y,
      z,
    );
  }

  late final _filament_indirect_light_get_color_estimatePtr = _lookup<
      ffi.NativeFunction<
          Vector4 Function(
              Vector4,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('filament_indirect_light_get_color_estimate');
  late final _filament_indirect_light_get_color_estimate =
      _filament_indirect_light_get_color_estimatePtr.asFunction<
          Vector4 Function(
              Vector4, ffi.Pointer<ffi.Float>, int, double, double, double)>();

  /// LightManager
  LightManagerRef filament_engine_get_light_manager(
    EngineRef engine,
  ) {
    return _filament_engine_get_light_manager(
      engine,
    );
  }

  late final _filament_engine_get_light_managerPtr =
      _lookup<ffi.NativeFunction<LightManagerRef Function(EngineRef)>>(
          'filament_engine_get_light_manager');
  late final _filament_engine_get_light_manager =
      _filament_engine_get_light_managerPtr
          .asFunction<LightManagerRef Function(EngineRef)>();

  int filament_light_manager_get_component_count(
    LightManagerRef lightManager,
  ) {
    return _filament_light_manager_get_component_count(
      lightManager,
    );
  }

  late final _filament_light_manager_get_component_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LightManagerRef)>>(
          'filament_light_manager_get_component_count');
  late final _filament_light_manager_get_component_count =
      _filament_light_manager_get_component_countPtr
          .asFunction<int Function(LightManagerRef)>();

  int filament_light_manager_has_component(
    LightManagerRef lightManager,
    int entity,
  ) {
    return _filament_light_manager_has_component(
      lightManager,
      entity,
    );
  }

  late final _filament_light_manager_has_componentPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(LightManagerRef, ffi.Int32)>>(
      'filament_light_manager_has_component');
  late final _filament_light_manager_has_component =
      _filament_light_manager_has_componentPtr
          .asFunction<int Function(LightManagerRef, int)>();

  int filament_light_manager_get_instance(
    LightManagerRef lightManager,
    int entity,
  ) {
    return _filament_light_manager_get_instance(
      lightManager,
      entity,
    );
  }

  late final _filament_light_manager_get_instancePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(LightManagerRef, ffi.Int32)>>(
      'filament_light_manager_get_instance');
  late final _filament_light_manager_get_instance =
      _filament_light_manager_get_instancePtr
          .asFunction<int Function(LightManagerRef, int)>();

  void filament_light_manager_destroy(
    LightManagerRef lightManager,
    int entity,
  ) {
    return _filament_light_manager_destroy(
      lightManager,
      entity,
    );
  }

  late final _filament_light_manager_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LightManagerRef, ffi.Int32)>>(
      'filament_light_manager_destroy');
  late final _filament_light_manager_destroy =
      _filament_light_manager_destroyPtr
          .asFunction<void Function(LightManagerRef, int)>();

  int filament_light_manager_get_type(
    LightManagerRef lightManager,
    int entityInstance,
  ) {
    return _filament_light_manager_get_type(
      lightManager,
      entityInstance,
    );
  }

  late final _filament_light_manager_get_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(LightManagerRef, ffi.Int32)>>(
      'filament_light_manager_get_type');
  late final _filament_light_manager_get_type =
      _filament_light_manager_get_typePtr
          .asFunction<int Function(LightManagerRef, int)>();

  void filament_light_manager_set_light_channel(
    LightManagerRef lightManager,
    int entityInstance,
    int channel,
    int enabled,
  ) {
    return _filament_light_manager_set_light_channel(
      lightManager,
      entityInstance,
      channel,
      enabled,
    );
  }

  late final _filament_light_manager_set_light_channelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LightManagerRef, ffi.Int32, ffi.Int32,
              ffi.Int32)>>('filament_light_manager_set_light_channel');
  late final _filament_light_manager_set_light_channel =
      _filament_light_manager_set_light_channelPtr
          .asFunction<void Function(LightManagerRef, int, int, int)>();

  int filament_light_manager_get_light_channel(
    LightManagerRef lightManager,
    int entityInstance,
    int channel,
  ) {
    return _filament_light_manager_get_light_channel(
      lightManager,
      entityInstance,
      channel,
    );
  }

  late final _filament_light_manager_get_light_channelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(LightManagerRef, ffi.Int32,
              ffi.Int32)>>('filament_light_manager_get_light_channel');
  late final _filament_light_manager_get_light_channel =
      _filament_light_manager_get_light_channelPtr
          .asFunction<int Function(LightManagerRef, int, int)>();

  void filament_light_manager_set_position(
    LightManagerRef lightManager,
    int entityInstance,
    double posX,
    double posY,
    double posZ,
  ) {
    return _filament_light_manager_set_position(
      lightManager,
      entityInstance,
      posX,
      posY,
      posZ,
    );
  }

  late final _filament_light_manager_set_positionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LightManagerRef, ffi.Int32, ffi.Double, ffi.Double,
              ffi.Double)>>('filament_light_manager_set_position');
  late final _filament_light_manager_set_position =
      _filament_light_manager_set_positionPtr.asFunction<
          void Function(LightManagerRef, int, double, double, double)>();

  void filament_light_manager_get_position(
    LightManagerRef lightManager,
    int entityInstance,
    ffi.Pointer<Vector3> result,
  ) {
    return _filament_light_manager_get_position(
      lightManager,
      entityInstance,
      result,
    );
  }

  late final _filament_light_manager_get_positionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LightManagerRef, ffi.Int32,
              ffi.Pointer<Vector3>)>>('filament_light_manager_get_position');
  late final _filament_light_manager_get_position =
      _filament_light_manager_get_positionPtr.asFunction<
          void Function(LightManagerRef, int, ffi.Pointer<Vector3>)>();

  void filament_light_manager_set_direction(
    LightManagerRef lightManager,
    int entityInstance,
    double dirX,
    double dirY,
    double dirZ,
  ) {
    return _filament_light_manager_set_direction(
      lightManager,
      entityInstance,
      dirX,
      dirY,
      dirZ,
    );
  }

  late final _filament_light_manager_set_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LightManagerRef, ffi.Int32, ffi.Double, ffi.Double,
              ffi.Double)>>('filament_light_manager_set_direction');
  late final _filament_light_manager_set_direction =
      _filament_light_manager_set_directionPtr.asFunction<
          void Function(LightManagerRef, int, double, double, double)>();

  void filament_light_manager_get_direction(
    LightManagerRef lightManager,
    int entityInstance,
    ffi.Pointer<Vector3> result,
  ) {
    return _filament_light_manager_get_direction(
      lightManager,
      entityInstance,
      result,
    );
  }

  late final _filament_light_manager_get_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LightManagerRef, ffi.Int32,
              ffi.Pointer<Vector3>)>>('filament_light_manager_get_direction');
  late final _filament_light_manager_get_direction =
      _filament_light_manager_get_directionPtr.asFunction<
          void Function(LightManagerRef, int, ffi.Pointer<Vector3>)>();

  void filament_light_manager_set_color(
    LightManagerRef lightManager,
    double colorR,
    double colorG,
    double colorB,
  ) {
    return _filament_light_manager_set_color(
      lightManager,
      colorR,
      colorG,
      colorB,
    );
  }

  late final _filament_light_manager_set_colorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LightManagerRef, ffi.Float, ffi.Float,
              ffi.Float)>>('filament_light_manager_set_color');
  late final _filament_light_manager_set_color =
      _filament_light_manager_set_colorPtr
          .asFunction<void Function(LightManagerRef, double, double, double)>();

  void filament_light_manager_get_color(
    LightManagerRef lightManager,
    ffi.Pointer<Vector3> result,
  ) {
    return _filament_light_manager_get_color(
      lightManager,
      result,
    );
  }

  late final _filament_light_manager_get_colorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LightManagerRef,
              ffi.Pointer<Vector3>)>>('filament_light_manager_get_color');
  late final _filament_light_manager_get_color =
      _filament_light_manager_get_colorPtr
          .asFunction<void Function(LightManagerRef, ffi.Pointer<Vector3>)>();

  void filament_light_manager_set_intensity(
    LightManagerRef lightManager,
    int entityInstance,
    double intensity,
  ) {
    return _filament_light_manager_set_intensity(
      lightManager,
      entityInstance,
      intensity,
    );
  }

  late final _filament_light_manager_set_intensityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LightManagerRef, ffi.Int32,
              ffi.Float)>>('filament_light_manager_set_intensity');
  late final _filament_light_manager_set_intensity =
      _filament_light_manager_set_intensityPtr
          .asFunction<void Function(LightManagerRef, int, double)>();

  double filament_light_manager_get_intensity(
    LightManagerRef lightManager,
    int entityInstance,
  ) {
    return _filament_light_manager_get_intensity(
      lightManager,
      entityInstance,
    );
  }

  late final _filament_light_manager_get_intensityPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(LightManagerRef, ffi.Int32)>>(
      'filament_light_manager_get_intensity');
  late final _filament_light_manager_get_intensity =
      _filament_light_manager_get_intensityPtr
          .asFunction<double Function(LightManagerRef, int)>();

  void filament_light_manager_set_falloff(
    LightManagerRef lightManager,
    int entityInstance,
    double falloff,
  ) {
    return _filament_light_manager_set_falloff(
      lightManager,
      entityInstance,
      falloff,
    );
  }

  late final _filament_light_manager_set_falloffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LightManagerRef, ffi.Int32,
              ffi.Float)>>('filament_light_manager_set_falloff');
  late final _filament_light_manager_set_falloff =
      _filament_light_manager_set_falloffPtr
          .asFunction<void Function(LightManagerRef, int, double)>();

  double filament_light_manager_get_falloff(
    LightManagerRef lightManager,
    int entityInstance,
  ) {
    return _filament_light_manager_get_falloff(
      lightManager,
      entityInstance,
    );
  }

  late final _filament_light_manager_get_falloffPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(LightManagerRef, ffi.Int32)>>(
      'filament_light_manager_get_falloff');
  late final _filament_light_manager_get_falloff =
      _filament_light_manager_get_falloffPtr
          .asFunction<double Function(LightManagerRef, int)>();

  void filament_light_manager_set_spotlight_cone(
    LightManagerRef lightManager,
    int entityInstance,
    double inner,
    double outer,
  ) {
    return _filament_light_manager_set_spotlight_cone(
      lightManager,
      entityInstance,
      inner,
      outer,
    );
  }

  late final _filament_light_manager_set_spotlight_conePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LightManagerRef, ffi.Int32, ffi.Float,
              ffi.Float)>>('filament_light_manager_set_spotlight_cone');
  late final _filament_light_manager_set_spotlight_cone =
      _filament_light_manager_set_spotlight_conePtr
          .asFunction<void Function(LightManagerRef, int, double, double)>();

  void filament_light_manager_set_sun_angular_radius(
    LightManagerRef lightManager,
    int entityInstance,
    double angularRadius,
  ) {
    return _filament_light_manager_set_sun_angular_radius(
      lightManager,
      entityInstance,
      angularRadius,
    );
  }

  late final _filament_light_manager_set_sun_angular_radiusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LightManagerRef, ffi.Int32,
              ffi.Float)>>('filament_light_manager_set_sun_angular_radius');
  late final _filament_light_manager_set_sun_angular_radius =
      _filament_light_manager_set_sun_angular_radiusPtr
          .asFunction<void Function(LightManagerRef, int, double)>();

  double filament_light_manager_get_sun_angular_radius(
    LightManagerRef lightManager,
    int entityInstance,
  ) {
    return _filament_light_manager_get_sun_angular_radius(
      lightManager,
      entityInstance,
    );
  }

  late final _filament_light_manager_get_sun_angular_radiusPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(LightManagerRef, ffi.Int32)>>(
      'filament_light_manager_get_sun_angular_radius');
  late final _filament_light_manager_get_sun_angular_radius =
      _filament_light_manager_get_sun_angular_radiusPtr
          .asFunction<double Function(LightManagerRef, int)>();

  void filament_light_manager_set_sun_halo_size(
    LightManagerRef lightManager,
    int entityInstance,
    double haloSize,
  ) {
    return _filament_light_manager_set_sun_halo_size(
      lightManager,
      entityInstance,
      haloSize,
    );
  }

  late final _filament_light_manager_set_sun_halo_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LightManagerRef, ffi.Int32,
              ffi.Float)>>('filament_light_manager_set_sun_halo_size');
  late final _filament_light_manager_set_sun_halo_size =
      _filament_light_manager_set_sun_halo_sizePtr
          .asFunction<void Function(LightManagerRef, int, double)>();

  double filament_light_manager_get_sun_halo_size(
    LightManagerRef lightManager,
    int entityInstance,
  ) {
    return _filament_light_manager_get_sun_halo_size(
      lightManager,
      entityInstance,
    );
  }

  late final _filament_light_manager_get_sun_halo_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(LightManagerRef, ffi.Int32)>>(
      'filament_light_manager_get_sun_halo_size');
  late final _filament_light_manager_get_sun_halo_size =
      _filament_light_manager_get_sun_halo_sizePtr
          .asFunction<double Function(LightManagerRef, int)>();

  void filament_light_manager_set_sun_halo_falloff(
    LightManagerRef lightManager,
    int entityInstance,
    double haloFalloff,
  ) {
    return _filament_light_manager_set_sun_halo_falloff(
      lightManager,
      entityInstance,
      haloFalloff,
    );
  }

  late final _filament_light_manager_set_sun_halo_falloffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LightManagerRef, ffi.Int32,
              ffi.Float)>>('filament_light_manager_set_sun_halo_falloff');
  late final _filament_light_manager_set_sun_halo_falloff =
      _filament_light_manager_set_sun_halo_falloffPtr
          .asFunction<void Function(LightManagerRef, int, double)>();

  double filament_light_manager_get_sun_halo_falloff(
    LightManagerRef lightManager,
    int entityInstance,
  ) {
    return _filament_light_manager_get_sun_halo_falloff(
      lightManager,
      entityInstance,
    );
  }

  late final _filament_light_manager_get_sun_halo_falloffPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(LightManagerRef, ffi.Int32)>>(
      'filament_light_manager_get_sun_halo_falloff');
  late final _filament_light_manager_get_sun_halo_falloff =
      _filament_light_manager_get_sun_halo_falloffPtr
          .asFunction<double Function(LightManagerRef, int)>();

  void filament_light_manager_set_shadow_caster(
    LightManagerRef lightManager,
    int entityInstance,
    int castShadows,
  ) {
    return _filament_light_manager_set_shadow_caster(
      lightManager,
      entityInstance,
      castShadows,
    );
  }

  late final _filament_light_manager_set_shadow_casterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LightManagerRef, ffi.Int32,
              ffi.Int32)>>('filament_light_manager_set_shadow_caster');
  late final _filament_light_manager_set_shadow_caster =
      _filament_light_manager_set_shadow_casterPtr
          .asFunction<void Function(LightManagerRef, int, int)>();

  int filament_light_manager_get_shadow_caster(
    LightManagerRef lightManager,
    int entityInstance,
  ) {
    return _filament_light_manager_get_shadow_caster(
      lightManager,
      entityInstance,
    );
  }

  late final _filament_light_manager_get_shadow_casterPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(LightManagerRef, ffi.Int32)>>(
      'filament_light_manager_get_shadow_caster');
  late final _filament_light_manager_get_shadow_caster =
      _filament_light_manager_get_shadow_casterPtr
          .asFunction<int Function(LightManagerRef, int)>();

  double filament_light_manager_get_outer_cone_angle(
    LightManagerRef lightManager,
    int entityInstance,
  ) {
    return _filament_light_manager_get_outer_cone_angle(
      lightManager,
      entityInstance,
    );
  }

  late final _filament_light_manager_get_outer_cone_anglePtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(LightManagerRef, ffi.Int32)>>(
      'filament_light_manager_get_outer_cone_angle');
  late final _filament_light_manager_get_outer_cone_angle =
      _filament_light_manager_get_outer_cone_anglePtr
          .asFunction<double Function(LightManagerRef, int)>();

  double filament_light_manager_get_inner_cone_angle(
    LightManagerRef ligthManager,
    int entityInstance,
  ) {
    return _filament_light_manager_get_inner_cone_angle(
      ligthManager,
      entityInstance,
    );
  }

  late final _filament_light_manager_get_inner_cone_anglePtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(LightManagerRef, ffi.Int32)>>(
      'filament_light_manager_get_inner_cone_angle');
  late final _filament_light_manager_get_inner_cone_angle =
      _filament_light_manager_get_inner_cone_anglePtr
          .asFunction<double Function(LightManagerRef, int)>();

  /// Material
  MaterialRef filament_engine_create_material_from_payload(
    EngineRef engine,
    ffi.Pointer<ffi.Void> data,
    int dataLen,
  ) {
    return _filament_engine_create_material_from_payload(
      engine,
      data,
      dataLen,
    );
  }

  late final _filament_engine_create_material_from_payloadPtr = _lookup<
      ffi.NativeFunction<
          MaterialRef Function(EngineRef, ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('filament_engine_create_material_from_payload');
  late final _filament_engine_create_material_from_payload =
      _filament_engine_create_material_from_payloadPtr.asFunction<
          MaterialRef Function(EngineRef, ffi.Pointer<ffi.Void>, int)>();

  MaterialInstanceRef filament_material_get_default_instance(
    MaterialRef material,
  ) {
    return _filament_material_get_default_instance(
      material,
    );
  }

  late final _filament_material_get_default_instancePtr =
      _lookup<ffi.NativeFunction<MaterialInstanceRef Function(MaterialRef)>>(
          'filament_material_get_default_instance');
  late final _filament_material_get_default_instance =
      _filament_material_get_default_instancePtr
          .asFunction<MaterialInstanceRef Function(MaterialRef)>();

  MaterialInstanceRef filament_material_create_instance(
    MaterialRef material,
  ) {
    return _filament_material_create_instance(
      material,
    );
  }

  late final _filament_material_create_instancePtr =
      _lookup<ffi.NativeFunction<MaterialInstanceRef Function(MaterialRef)>>(
          'filament_material_create_instance');
  late final _filament_material_create_instance =
      _filament_material_create_instancePtr
          .asFunction<MaterialInstanceRef Function(MaterialRef)>();

  MaterialInstanceRef filament_material_create_instance_with_name(
    MaterialRef material,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _filament_material_create_instance_with_name(
      material,
      name,
    );
  }

  late final _filament_material_create_instance_with_namePtr = _lookup<
          ffi.NativeFunction<
              MaterialInstanceRef Function(
                  MaterialRef, ffi.Pointer<ffi.Int8>)>>(
      'filament_material_create_instance_with_name');
  late final _filament_material_create_instance_with_name =
      _filament_material_create_instance_with_namePtr.asFunction<
          MaterialInstanceRef Function(MaterialRef, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> filament_material_get_name(
    MaterialRef material,
  ) {
    return _filament_material_get_name(
      material,
    );
  }

  late final _filament_material_get_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(MaterialRef)>>(
          'filament_material_get_name');
  late final _filament_material_get_name = _filament_material_get_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(MaterialRef)>();

  int filament_material_get_shading(
    MaterialRef material,
  ) {
    return _filament_material_get_shading(
      material,
    );
  }

  late final _filament_material_get_shadingPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(MaterialRef)>>(
          'filament_material_get_shading');
  late final _filament_material_get_shading =
      _filament_material_get_shadingPtr.asFunction<int Function(MaterialRef)>();

  int filament_material_get_interpolation(
    MaterialRef material,
  ) {
    return _filament_material_get_interpolation(
      material,
    );
  }

  late final _filament_material_get_interpolationPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(MaterialRef)>>(
          'filament_material_get_interpolation');
  late final _filament_material_get_interpolation =
      _filament_material_get_interpolationPtr
          .asFunction<int Function(MaterialRef)>();

  int filament_material_get_blending_mode(
    MaterialRef material,
  ) {
    return _filament_material_get_blending_mode(
      material,
    );
  }

  late final _filament_material_get_blending_modePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(MaterialRef)>>(
          'filament_material_get_blending_mode');
  late final _filament_material_get_blending_mode =
      _filament_material_get_blending_modePtr
          .asFunction<int Function(MaterialRef)>();

  int filament_material_get_refraction_mode(
    MaterialRef material,
  ) {
    return _filament_material_get_refraction_mode(
      material,
    );
  }

  late final _filament_material_get_refraction_modePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(MaterialRef)>>(
          'filament_material_get_refraction_mode');
  late final _filament_material_get_refraction_mode =
      _filament_material_get_refraction_modePtr
          .asFunction<int Function(MaterialRef)>();

  int filament_material_get_refraction_type(
    MaterialRef material,
  ) {
    return _filament_material_get_refraction_type(
      material,
    );
  }

  late final _filament_material_get_refraction_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(MaterialRef)>>(
          'filament_material_get_refraction_type');
  late final _filament_material_get_refraction_type =
      _filament_material_get_refraction_typePtr
          .asFunction<int Function(MaterialRef)>();

  int filament_material_get_vertex_domain(
    MaterialRef material,
  ) {
    return _filament_material_get_vertex_domain(
      material,
    );
  }

  late final _filament_material_get_vertex_domainPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(MaterialRef)>>(
          'filament_material_get_vertex_domain');
  late final _filament_material_get_vertex_domain =
      _filament_material_get_vertex_domainPtr
          .asFunction<int Function(MaterialRef)>();

  int filament_material_get_culling_mode(
    MaterialRef material,
  ) {
    return _filament_material_get_culling_mode(
      material,
    );
  }

  late final _filament_material_get_culling_modePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(MaterialRef)>>(
          'filament_material_get_culling_mode');
  late final _filament_material_get_culling_mode =
      _filament_material_get_culling_modePtr
          .asFunction<int Function(MaterialRef)>();

  int filament_material_get_is_color_write_enabled(
    MaterialRef material,
  ) {
    return _filament_material_get_is_color_write_enabled(
      material,
    );
  }

  late final _filament_material_get_is_color_write_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(MaterialRef)>>(
          'filament_material_get_is_color_write_enabled');
  late final _filament_material_get_is_color_write_enabled =
      _filament_material_get_is_color_write_enabledPtr
          .asFunction<int Function(MaterialRef)>();

  int filament_material_get_is_depth_write_enabled(
    MaterialRef material,
  ) {
    return _filament_material_get_is_depth_write_enabled(
      material,
    );
  }

  late final _filament_material_get_is_depth_write_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(MaterialRef)>>(
          'filament_material_get_is_depth_write_enabled');
  late final _filament_material_get_is_depth_write_enabled =
      _filament_material_get_is_depth_write_enabledPtr
          .asFunction<int Function(MaterialRef)>();

  int filament_material_get_is_depth_culling_enabled(
    MaterialRef material,
  ) {
    return _filament_material_get_is_depth_culling_enabled(
      material,
    );
  }

  late final _filament_material_get_is_depth_culling_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(MaterialRef)>>(
          'filament_material_get_is_depth_culling_enabled');
  late final _filament_material_get_is_depth_culling_enabled =
      _filament_material_get_is_depth_culling_enabledPtr
          .asFunction<int Function(MaterialRef)>();

  int filament_material_get_is_double_sided(
    MaterialRef material,
  ) {
    return _filament_material_get_is_double_sided(
      material,
    );
  }

  late final _filament_material_get_is_double_sidedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(MaterialRef)>>(
          'filament_material_get_is_double_sided');
  late final _filament_material_get_is_double_sided =
      _filament_material_get_is_double_sidedPtr
          .asFunction<int Function(MaterialRef)>();

  double filament_material_get_mask_threshold(
    MaterialRef material,
  ) {
    return _filament_material_get_mask_threshold(
      material,
    );
  }

  late final _filament_material_get_mask_thresholdPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(MaterialRef)>>(
          'filament_material_get_mask_threshold');
  late final _filament_material_get_mask_threshold =
      _filament_material_get_mask_thresholdPtr
          .asFunction<double Function(MaterialRef)>();

  double filament_material_get_specular_aa_variance(
    MaterialRef material,
  ) {
    return _filament_material_get_specular_aa_variance(
      material,
    );
  }

  late final _filament_material_get_specular_aa_variancePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(MaterialRef)>>(
          'filament_material_get_specular_aa_variance');
  late final _filament_material_get_specular_aa_variance =
      _filament_material_get_specular_aa_variancePtr
          .asFunction<double Function(MaterialRef)>();

  double filament_material_get_specular_aa_threshold(
    MaterialRef material,
  ) {
    return _filament_material_get_specular_aa_threshold(
      material,
    );
  }

  late final _filament_material_get_specular_aa_thresholdPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(MaterialRef)>>(
          'filament_material_get_specular_aa_threshold');
  late final _filament_material_get_specular_aa_threshold =
      _filament_material_get_specular_aa_thresholdPtr
          .asFunction<double Function(MaterialRef)>();

  int filament_material_get_required_attributes(
    MaterialRef material,
  ) {
    return _filament_material_get_required_attributes(
      material,
    );
  }

  late final _filament_material_get_required_attributesPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(MaterialRef)>>(
          'filament_material_get_required_attributes');
  late final _filament_material_get_required_attributes =
      _filament_material_get_required_attributesPtr
          .asFunction<int Function(MaterialRef)>();

  int filament_material_get_parameter_count(
    MaterialRef material,
  ) {
    return _filament_material_get_parameter_count(
      material,
    );
  }

  late final _filament_material_get_parameter_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(MaterialRef)>>(
          'filament_material_get_parameter_count');
  late final _filament_material_get_parameter_count =
      _filament_material_get_parameter_countPtr
          .asFunction<int Function(MaterialRef)>();

  int filament_material_get_parameters(
    MaterialRef material,
    ffi.Pointer<ParameterRef> parameters,
    int parameterCount,
  ) {
    return _filament_material_get_parameters(
      material,
      parameters,
      parameterCount,
    );
  }

  late final _filament_material_get_parametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(MaterialRef, ffi.Pointer<ParameterRef>,
              ffi.Int32)>>('filament_material_get_parameters');
  late final _filament_material_get_parameters =
      _filament_material_get_parametersPtr.asFunction<
          int Function(MaterialRef, ffi.Pointer<ParameterRef>, int)>();

  int filament_material_get_has_parameter(
    MaterialRef material,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _filament_material_get_has_parameter(
      material,
      name,
    );
  }

  late final _filament_material_get_has_parameterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(MaterialRef,
              ffi.Pointer<ffi.Int8>)>>('filament_material_get_has_parameter');
  late final _filament_material_get_has_parameter =
      _filament_material_get_has_parameterPtr
          .asFunction<int Function(MaterialRef, ffi.Pointer<ffi.Int8>)>();

  /// MaterialInstance
  MaterialRef filament_material_instance_get_material(
    MaterialInstanceRef materialInstance,
  ) {
    return _filament_material_instance_get_material(
      materialInstance,
    );
  }

  late final _filament_material_instance_get_materialPtr =
      _lookup<ffi.NativeFunction<MaterialRef Function(MaterialInstanceRef)>>(
          'filament_material_instance_get_material');
  late final _filament_material_instance_get_material =
      _filament_material_instance_get_materialPtr
          .asFunction<MaterialRef Function(MaterialInstanceRef)>();

  MaterialInstanceRef filament_duplicate_material_instance(
    MaterialInstanceRef otherInstance,
    ffi.Pointer<ffi.Int8> newName,
  ) {
    return _filament_duplicate_material_instance(
      otherInstance,
      newName,
    );
  }

  late final _filament_duplicate_material_instancePtr = _lookup<
      ffi.NativeFunction<
          MaterialInstanceRef Function(MaterialInstanceRef,
              ffi.Pointer<ffi.Int8>)>>('filament_duplicate_material_instance');
  late final _filament_duplicate_material_instance =
      _filament_duplicate_material_instancePtr.asFunction<
          MaterialInstanceRef Function(
              MaterialInstanceRef, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> filament_material_instance_get_name(
    MaterialInstanceRef materialInstance,
  ) {
    return _filament_material_instance_get_name(
      materialInstance,
    );
  }

  late final _filament_material_instance_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              MaterialInstanceRef)>>('filament_material_instance_get_name');
  late final _filament_material_instance_get_name =
      _filament_material_instance_get_namePtr
          .asFunction<ffi.Pointer<ffi.Int8> Function(MaterialInstanceRef)>();

  void filament_material_instance_set_param_bool(
    MaterialInstanceRef materialInstance,
    ffi.Pointer<ffi.Int8> name,
    int x,
  ) {
    return _filament_material_instance_set_param_bool(
      materialInstance,
      name,
      x,
    );
  }

  late final _filament_material_instance_set_param_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(MaterialInstanceRef, ffi.Pointer<ffi.Int8>,
              bool)>>('filament_material_instance_set_param_bool');
  late final _filament_material_instance_set_param_bool =
      _filament_material_instance_set_param_boolPtr.asFunction<
          void Function(MaterialInstanceRef, ffi.Pointer<ffi.Int8>, int)>();

  void filament_material_instance_set_param_bool2(
    MaterialInstanceRef materialInstance,
    ffi.Pointer<ffi.Int8> name,
    int x,
    int y,
  ) {
    return _filament_material_instance_set_param_bool2(
      materialInstance,
      name,
      x,
      y,
    );
  }

  late final _filament_material_instance_set_param_bool2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(MaterialInstanceRef, ffi.Pointer<ffi.Int8>, bool,
              bool)>>('filament_material_instance_set_param_bool2');
  late final _filament_material_instance_set_param_bool2 =
      _filament_material_instance_set_param_bool2Ptr.asFunction<
          void Function(
              MaterialInstanceRef, ffi.Pointer<ffi.Int8>, int, int)>();

  void filament_material_instance_set_param_bool3(
    MaterialInstanceRef materialInstance,
    ffi.Pointer<ffi.Int8> name,
    int x,
    int y,
    int z,
  ) {
    return _filament_material_instance_set_param_bool3(
      materialInstance,
      name,
      x,
      y,
      z,
    );
  }

  late final _filament_material_instance_set_param_bool3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(MaterialInstanceRef, ffi.Pointer<ffi.Int8>, bool,
              bool, bool)>>('filament_material_instance_set_param_bool3');
  late final _filament_material_instance_set_param_bool3 =
      _filament_material_instance_set_param_bool3Ptr.asFunction<
          void Function(
              MaterialInstanceRef, ffi.Pointer<ffi.Int8>, int, int, int)>();

  void filament_material_instance_set_param_bool4(
    MaterialInstanceRef materialInstance,
    ffi.Pointer<ffi.Int8> name,
    int x,
    int y,
    int z,
    int w,
  ) {
    return _filament_material_instance_set_param_bool4(
      materialInstance,
      name,
      x,
      y,
      z,
      w,
    );
  }

  late final _filament_material_instance_set_param_bool4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(MaterialInstanceRef, ffi.Pointer<ffi.Int8>, bool,
              bool, bool, bool)>>('filament_material_instance_set_param_bool4');
  late final _filament_material_instance_set_param_bool4 =
      _filament_material_instance_set_param_bool4Ptr.asFunction<
          void Function(MaterialInstanceRef, ffi.Pointer<ffi.Int8>, int, int,
              int, int)>();

  void filament_material_instance_set_param_int(
    MaterialInstanceRef materialInstance,
    ffi.Pointer<ffi.Int8> name,
    int x,
  ) {
    return _filament_material_instance_set_param_int(
      materialInstance,
      name,
      x,
    );
  }

  late final _filament_material_instance_set_param_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(MaterialInstanceRef, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('filament_material_instance_set_param_int');
  late final _filament_material_instance_set_param_int =
      _filament_material_instance_set_param_intPtr.asFunction<
          void Function(MaterialInstanceRef, ffi.Pointer<ffi.Int8>, int)>();

  void filament_material_instance_set_param_int2(
    MaterialInstanceRef materialInstance,
    ffi.Pointer<ffi.Int8> name,
    int x,
    int y,
  ) {
    return _filament_material_instance_set_param_int2(
      materialInstance,
      name,
      x,
      y,
    );
  }

  late final _filament_material_instance_set_param_int2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              MaterialInstanceRef,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Int32)>>('filament_material_instance_set_param_int2');
  late final _filament_material_instance_set_param_int2 =
      _filament_material_instance_set_param_int2Ptr.asFunction<
          void Function(
              MaterialInstanceRef, ffi.Pointer<ffi.Int8>, int, int)>();

  void filament_material_instance_set_param_int3(
    MaterialInstanceRef materialInstance,
    ffi.Pointer<ffi.Int8> name,
    int x,
    int y,
    int z,
  ) {
    return _filament_material_instance_set_param_int3(
      materialInstance,
      name,
      x,
      y,
      z,
    );
  }

  late final _filament_material_instance_set_param_int3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              MaterialInstanceRef,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>>('filament_material_instance_set_param_int3');
  late final _filament_material_instance_set_param_int3 =
      _filament_material_instance_set_param_int3Ptr.asFunction<
          void Function(
              MaterialInstanceRef, ffi.Pointer<ffi.Int8>, int, int, int)>();

  void filament_material_instance_set_param_int4(
    MaterialInstanceRef materialInstance,
    ffi.Pointer<ffi.Int8> name,
    int x,
    int y,
    int z,
    int w,
  ) {
    return _filament_material_instance_set_param_int4(
      materialInstance,
      name,
      x,
      y,
      z,
      w,
    );
  }

  late final _filament_material_instance_set_param_int4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              MaterialInstanceRef,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>>('filament_material_instance_set_param_int4');
  late final _filament_material_instance_set_param_int4 =
      _filament_material_instance_set_param_int4Ptr.asFunction<
          void Function(MaterialInstanceRef, ffi.Pointer<ffi.Int8>, int, int,
              int, int)>();

  void filament_material_instance_set_param_float(
    MaterialInstanceRef materialInstance,
    ffi.Pointer<ffi.Int8> name,
    double x,
  ) {
    return _filament_material_instance_set_param_float(
      materialInstance,
      name,
      x,
    );
  }

  late final _filament_material_instance_set_param_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(MaterialInstanceRef, ffi.Pointer<ffi.Int8>,
              ffi.Float)>>('filament_material_instance_set_param_float');
  late final _filament_material_instance_set_param_float =
      _filament_material_instance_set_param_floatPtr.asFunction<
          void Function(MaterialInstanceRef, ffi.Pointer<ffi.Int8>, double)>();

  void filament_material_instance_set_param_float2(
    MaterialInstanceRef materialInstance,
    ffi.Pointer<ffi.Int8> name,
    double x,
    double y,
  ) {
    return _filament_material_instance_set_param_float2(
      materialInstance,
      name,
      x,
      y,
    );
  }

  late final _filament_material_instance_set_param_float2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              MaterialInstanceRef,
              ffi.Pointer<ffi.Int8>,
              ffi.Float,
              ffi.Float)>>('filament_material_instance_set_param_float2');
  late final _filament_material_instance_set_param_float2 =
      _filament_material_instance_set_param_float2Ptr.asFunction<
          void Function(
              MaterialInstanceRef, ffi.Pointer<ffi.Int8>, double, double)>();

  void filament_material_instance_set_param_float3(
    MaterialInstanceRef materialInstance,
    ffi.Pointer<ffi.Int8> name,
    double x,
    double y,
    double z,
  ) {
    return _filament_material_instance_set_param_float3(
      materialInstance,
      name,
      x,
      y,
      z,
    );
  }

  late final _filament_material_instance_set_param_float3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              MaterialInstanceRef,
              ffi.Pointer<ffi.Int8>,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('filament_material_instance_set_param_float3');
  late final _filament_material_instance_set_param_float3 =
      _filament_material_instance_set_param_float3Ptr.asFunction<
          void Function(MaterialInstanceRef, ffi.Pointer<ffi.Int8>, double,
              double, double)>();

  void filament_material_instance_set_param_float4(
    MaterialInstanceRef materialInstance,
    ffi.Pointer<ffi.Int8> name,
    double x,
    double y,
    double z,
    double w,
  ) {
    return _filament_material_instance_set_param_float4(
      materialInstance,
      name,
      x,
      y,
      z,
      w,
    );
  }

  late final _filament_material_instance_set_param_float4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              MaterialInstanceRef,
              ffi.Pointer<ffi.Int8>,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('filament_material_instance_set_param_float4');
  late final _filament_material_instance_set_param_float4 =
      _filament_material_instance_set_param_float4Ptr.asFunction<
          void Function(MaterialInstanceRef, ffi.Pointer<ffi.Int8>, double,
              double, double, double)>();

  void filament_material_instance_set_param_rgb(
    MaterialInstanceRef materialInstance,
    ffi.Pointer<ffi.Int8> name,
    double r,
    double g,
    double b,
  ) {
    return _filament_material_instance_set_param_rgb(
      materialInstance,
      name,
      r,
      g,
      b,
    );
  }

  late final _filament_material_instance_set_param_rgbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              MaterialInstanceRef,
              ffi.Pointer<ffi.Int8>,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('filament_material_instance_set_param_rgb');
  late final _filament_material_instance_set_param_rgb =
      _filament_material_instance_set_param_rgbPtr.asFunction<
          void Function(MaterialInstanceRef, ffi.Pointer<ffi.Int8>, double,
              double, double)>();

  void filament_material_instance_set_param_rgba(
    MaterialInstanceRef materialInstance,
    ffi.Pointer<ffi.Int8> name,
    double r,
    double g,
    double b,
    double a,
  ) {
    return _filament_material_instance_set_param_rgba(
      materialInstance,
      name,
      r,
      g,
      b,
      a,
    );
  }

  late final _filament_material_instance_set_param_rgbaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              MaterialInstanceRef,
              ffi.Pointer<ffi.Int8>,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('filament_material_instance_set_param_rgba');
  late final _filament_material_instance_set_param_rgba =
      _filament_material_instance_set_param_rgbaPtr.asFunction<
          void Function(MaterialInstanceRef, ffi.Pointer<ffi.Int8>, double,
              double, double, double)>();

  void filament_material_instance_set_param_bool_array(
    MaterialInstanceRef materialInstance,
    ffi.Pointer<ffi.Int8> name,
    int type,
    ffi.Pointer<bool> v,
    int offset,
    int count,
  ) {
    return _filament_material_instance_set_param_bool_array(
      materialInstance,
      name,
      type,
      v,
      offset,
      count,
    );
  }

  late final _filament_material_instance_set_param_bool_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              MaterialInstanceRef,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Pointer<bool>,
              ffi.Int32,
              ffi.Int32)>>('filament_material_instance_set_param_bool_array');
  late final _filament_material_instance_set_param_bool_array =
      _filament_material_instance_set_param_bool_arrayPtr.asFunction<
          void Function(MaterialInstanceRef, ffi.Pointer<ffi.Int8>, int,
              ffi.Pointer<bool>, int, int)>();

  void filament_material_instance_set_param_int_array(
    MaterialInstanceRef materialInstance,
    ffi.Pointer<ffi.Int8> name,
    int type,
    ffi.Pointer<ffi.Int32> v,
    int offset,
    int count,
  ) {
    return _filament_material_instance_set_param_int_array(
      materialInstance,
      name,
      type,
      v,
      offset,
      count,
    );
  }

  late final _filament_material_instance_set_param_int_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              MaterialInstanceRef,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Pointer<ffi.Int32>,
              ffi.Int32,
              ffi.Int32)>>('filament_material_instance_set_param_int_array');
  late final _filament_material_instance_set_param_int_array =
      _filament_material_instance_set_param_int_arrayPtr.asFunction<
          void Function(MaterialInstanceRef, ffi.Pointer<ffi.Int8>, int,
              ffi.Pointer<ffi.Int32>, int, int)>();

  void filament_material_instance_set_param_float_array(
    MaterialInstanceRef materialInstance,
    ffi.Pointer<ffi.Int8> name,
    int type,
    ffi.Pointer<ffi.Float> v,
    int offset,
    int count,
  ) {
    return _filament_material_instance_set_param_float_array(
      materialInstance,
      name,
      type,
      v,
      offset,
      count,
    );
  }

  late final _filament_material_instance_set_param_float_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              MaterialInstanceRef,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Int32)>>('filament_material_instance_set_param_float_array');
  late final _filament_material_instance_set_param_float_array =
      _filament_material_instance_set_param_float_arrayPtr.asFunction<
          void Function(MaterialInstanceRef, ffi.Pointer<ffi.Int8>, int,
              ffi.Pointer<ffi.Float>, int, int)>();

  void filament_material_instance_set_param_texture(
    MaterialInstanceRef materialInstance,
    ffi.Pointer<ffi.Int8> name,
    TextureRef texture,
    TextureSamplerRef sampler,
  ) {
    return _filament_material_instance_set_param_texture(
      materialInstance,
      name,
      texture,
      sampler,
    );
  }

  late final _filament_material_instance_set_param_texturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(MaterialInstanceRef, ffi.Pointer<ffi.Int8>,
                  TextureRef, TextureSamplerRef)>>(
      'filament_material_instance_set_param_texture');
  late final _filament_material_instance_set_param_texture =
      _filament_material_instance_set_param_texturePtr.asFunction<
          void Function(MaterialInstanceRef, ffi.Pointer<ffi.Int8>, TextureRef,
              TextureSamplerRef)>();

  void filament_material_instance_set_scissor(
    MaterialInstanceRef materialInstance,
    int left,
    int bottom,
    int width,
    int height,
  ) {
    return _filament_material_instance_set_scissor(
      materialInstance,
      left,
      bottom,
      width,
      height,
    );
  }

  late final _filament_material_instance_set_scissorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(MaterialInstanceRef, ffi.Int32, ffi.Int32,
              ffi.Int32, ffi.Int32)>>('filament_material_instance_set_scissor');
  late final _filament_material_instance_set_scissor =
      _filament_material_instance_set_scissorPtr
          .asFunction<void Function(MaterialInstanceRef, int, int, int, int)>();

  void filament_material_instance_unset_scissor(
    MaterialInstanceRef materialInstance,
  ) {
    return _filament_material_instance_unset_scissor(
      materialInstance,
    );
  }

  late final _filament_material_instance_unset_scissorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(MaterialInstanceRef)>>(
          'filament_material_instance_unset_scissor');
  late final _filament_material_instance_unset_scissor =
      _filament_material_instance_unset_scissorPtr
          .asFunction<void Function(MaterialInstanceRef)>();

  void filament_material_instance_set_polygon_offset(
    MaterialInstanceRef materialInstance,
    double scale,
    double constant,
  ) {
    return _filament_material_instance_set_polygon_offset(
      materialInstance,
      scale,
      constant,
    );
  }

  late final _filament_material_instance_set_polygon_offsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(MaterialInstanceRef, ffi.Float,
              ffi.Float)>>('filament_material_instance_set_polygon_offset');
  late final _filament_material_instance_set_polygon_offset =
      _filament_material_instance_set_polygon_offsetPtr
          .asFunction<void Function(MaterialInstanceRef, double, double)>();

  void filament_material_instance_set_mask_threshold(
    MaterialInstanceRef materialInstance,
    double threshold,
  ) {
    return _filament_material_instance_set_mask_threshold(
      materialInstance,
      threshold,
    );
  }

  late final _filament_material_instance_set_mask_thresholdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(MaterialInstanceRef,
              ffi.Float)>>('filament_material_instance_set_mask_threshold');
  late final _filament_material_instance_set_mask_threshold =
      _filament_material_instance_set_mask_thresholdPtr
          .asFunction<void Function(MaterialInstanceRef, double)>();

  void filament_material_instance_set_specular_aa_variance(
    MaterialInstanceRef materialInstance,
    double variance,
  ) {
    return _filament_material_instance_set_specular_aa_variance(
      materialInstance,
      variance,
    );
  }

  late final _filament_material_instance_set_specular_aa_variancePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(MaterialInstanceRef, ffi.Float)>>(
      'filament_material_instance_set_specular_aa_variance');
  late final _filament_material_instance_set_specular_aa_variance =
      _filament_material_instance_set_specular_aa_variancePtr
          .asFunction<void Function(MaterialInstanceRef, double)>();

  void filament_material_instance_set_specular_aa_threshold(
    MaterialInstanceRef materialInstance,
    double threshold,
  ) {
    return _filament_material_instance_set_specular_aa_threshold(
      materialInstance,
      threshold,
    );
  }

  late final _filament_material_instance_set_specular_aa_thresholdPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(MaterialInstanceRef, ffi.Float)>>(
      'filament_material_instance_set_specular_aa_threshold');
  late final _filament_material_instance_set_specular_aa_threshold =
      _filament_material_instance_set_specular_aa_thresholdPtr
          .asFunction<void Function(MaterialInstanceRef, double)>();

  void filament_material_instance_set_double_sided(
    MaterialInstanceRef materialInstance,
    int doubleSided,
  ) {
    return _filament_material_instance_set_double_sided(
      materialInstance,
      doubleSided,
    );
  }

  late final _filament_material_instance_set_double_sidedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(MaterialInstanceRef, bool)>>(
          'filament_material_instance_set_double_sided');
  late final _filament_material_instance_set_double_sided =
      _filament_material_instance_set_double_sidedPtr
          .asFunction<void Function(MaterialInstanceRef, int)>();

  void filament_material_instance_set_culling_mode(
    MaterialInstanceRef materialInstance,
    int cullingMode,
  ) {
    return _filament_material_instance_set_culling_mode(
      materialInstance,
      cullingMode,
    );
  }

  late final _filament_material_instance_set_culling_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(MaterialInstanceRef,
              ffi.Int32)>>('filament_material_instance_set_culling_mode');
  late final _filament_material_instance_set_culling_mode =
      _filament_material_instance_set_culling_modePtr
          .asFunction<void Function(MaterialInstanceRef, int)>();

  void filament_material_instance_set_color_write(
    MaterialInstanceRef materialInstance,
    int enable,
  ) {
    return _filament_material_instance_set_color_write(
      materialInstance,
      enable,
    );
  }

  late final _filament_material_instance_set_color_writePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(MaterialInstanceRef, bool)>>(
          'filament_material_instance_set_color_write');
  late final _filament_material_instance_set_color_write =
      _filament_material_instance_set_color_writePtr
          .asFunction<void Function(MaterialInstanceRef, int)>();

  void filament_material_instance_set_depth_write(
    MaterialInstanceRef materialInstance,
    int enable,
  ) {
    return _filament_material_instance_set_depth_write(
      materialInstance,
      enable,
    );
  }

  late final _filament_material_instance_set_depth_writePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(MaterialInstanceRef, bool)>>(
          'filament_material_instance_set_depth_write');
  late final _filament_material_instance_set_depth_write =
      _filament_material_instance_set_depth_writePtr
          .asFunction<void Function(MaterialInstanceRef, int)>();

  void filament_material_instance_set_depth_culling(
    MaterialInstanceRef materialInstance,
    int enable,
  ) {
    return _filament_material_instance_set_depth_culling(
      materialInstance,
      enable,
    );
  }

  late final _filament_material_instance_set_depth_cullingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(MaterialInstanceRef, bool)>>(
          'filament_material_instance_set_depth_culling');
  late final _filament_material_instance_set_depth_culling =
      _filament_material_instance_set_depth_cullingPtr
          .asFunction<void Function(MaterialInstanceRef, int)>();

  /// NativeSurface
  NativeSurfaceRef filament_create_native_surface(
    int width,
    int height,
  ) {
    return _filament_create_native_surface(
      width,
      height,
    );
  }

  late final _filament_create_native_surfacePtr = _lookup<
          ffi.NativeFunction<NativeSurfaceRef Function(ffi.Int32, ffi.Int32)>>(
      'filament_create_native_surface');
  late final _filament_create_native_surface =
      _filament_create_native_surfacePtr
          .asFunction<NativeSurfaceRef Function(int, int)>();

  void filament_destroy_native_surface(
    NativeSurfaceRef surface,
  ) {
    return _filament_destroy_native_surface(
      surface,
    );
  }

  late final _filament_destroy_native_surfacePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(NativeSurfaceRef)>>(
          'filament_destroy_native_surface');
  late final _filament_destroy_native_surface =
      _filament_destroy_native_surfacePtr
          .asFunction<void Function(NativeSurfaceRef)>();

  RenderTargetRef filament_engine_create_render_target(
    EngineRef engine,
    ffi.Pointer<filament_render_target_attachment_config_t> attachmentConfigs,
    int attachmentConfigsCount,
  ) {
    return _filament_engine_create_render_target(
      engine,
      attachmentConfigs,
      attachmentConfigsCount,
    );
  }

  late final _filament_engine_create_render_targetPtr = _lookup<
      ffi.NativeFunction<
          RenderTargetRef Function(
              EngineRef,
              ffi.Pointer<filament_render_target_attachment_config_t>,
              ffi.Int32)>>('filament_engine_create_render_target');
  late final _filament_engine_create_render_target =
      _filament_engine_create_render_targetPtr.asFunction<
          RenderTargetRef Function(EngineRef,
              ffi.Pointer<filament_render_target_attachment_config_t>, int)>();

  void filament_destroy_render_target(
    RenderTargetRef renderTarget,
  ) {
    return _filament_destroy_render_target(
      renderTarget,
    );
  }

  late final _filament_destroy_render_targetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RenderTargetRef)>>(
          'filament_destroy_render_target');
  late final _filament_destroy_render_target =
      _filament_destroy_render_targetPtr
          .asFunction<void Function(RenderTargetRef)>();

  /// TextureSampler
  TextureSamplerRef filament_create_texture_sampler(
    int min,
    int mag,
    int wrapS,
    int wrapT,
    int wrapR,
  ) {
    return _filament_create_texture_sampler(
      min,
      mag,
      wrapS,
      wrapT,
      wrapR,
    );
  }

  late final _filament_create_texture_samplerPtr = _lookup<
      ffi.NativeFunction<
          TextureSamplerRef Function(ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32,
              ffi.Int32)>>('filament_create_texture_sampler');
  late final _filament_create_texture_sampler =
      _filament_create_texture_samplerPtr
          .asFunction<TextureSamplerRef Function(int, int, int, int, int)>();

  TextureSamplerRef filament_create_compare_texture_sampler(
    int mode,
    int function,
  ) {
    return _filament_create_compare_texture_sampler(
      mode,
      function,
    );
  }

  late final _filament_create_compare_texture_samplerPtr = _lookup<
          ffi.NativeFunction<TextureSamplerRef Function(ffi.Int32, ffi.Int32)>>(
      'filament_create_compare_texture_sampler');
  late final _filament_create_compare_texture_sampler =
      _filament_create_compare_texture_samplerPtr
          .asFunction<TextureSamplerRef Function(int, int)>();

  void filament_destroy_texture_sampler(
    TextureSamplerRef sampler,
  ) {
    return _filament_destroy_texture_sampler(
      sampler,
    );
  }

  late final _filament_destroy_texture_samplerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(TextureSamplerRef)>>(
          'filament_destroy_texture_sampler');
  late final _filament_destroy_texture_sampler =
      _filament_destroy_texture_samplerPtr
          .asFunction<void Function(TextureSamplerRef)>();

  int filament_texture_sampler_get_min_filter(
    TextureSamplerRef sampler,
  ) {
    return _filament_texture_sampler_get_min_filter(
      sampler,
    );
  }

  late final _filament_texture_sampler_get_min_filterPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(TextureSamplerRef)>>(
          'filament_texture_sampler_get_min_filter');
  late final _filament_texture_sampler_get_min_filter =
      _filament_texture_sampler_get_min_filterPtr
          .asFunction<int Function(TextureSamplerRef)>();

  void filament_texture_sampler_set_min_filter(
    TextureSamplerRef sampler,
    int minFilter,
  ) {
    return _filament_texture_sampler_set_min_filter(
      sampler,
      minFilter,
    );
  }

  late final _filament_texture_sampler_set_min_filterPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(TextureSamplerRef, ffi.Int32)>>(
      'filament_texture_sampler_set_min_filter');
  late final _filament_texture_sampler_set_min_filter =
      _filament_texture_sampler_set_min_filterPtr
          .asFunction<void Function(TextureSamplerRef, int)>();

  int filament_texture_sampler_get_mag_filter(
    TextureSamplerRef sampler,
  ) {
    return _filament_texture_sampler_get_mag_filter(
      sampler,
    );
  }

  late final _filament_texture_sampler_get_mag_filterPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(TextureSamplerRef)>>(
          'filament_texture_sampler_get_mag_filter');
  late final _filament_texture_sampler_get_mag_filter =
      _filament_texture_sampler_get_mag_filterPtr
          .asFunction<int Function(TextureSamplerRef)>();

  void filament_texture_sampler_set_mag_filter(
    TextureSamplerRef sampler,
    int magFilter,
  ) {
    return _filament_texture_sampler_set_mag_filter(
      sampler,
      magFilter,
    );
  }

  late final _filament_texture_sampler_set_mag_filterPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(TextureSamplerRef, ffi.Int32)>>(
      'filament_texture_sampler_set_mag_filter');
  late final _filament_texture_sampler_set_mag_filter =
      _filament_texture_sampler_set_mag_filterPtr
          .asFunction<void Function(TextureSamplerRef, int)>();

  int filament_texture_sampler_get_wrap_mode_s(
    TextureSamplerRef sampler,
  ) {
    return _filament_texture_sampler_get_wrap_mode_s(
      sampler,
    );
  }

  late final _filament_texture_sampler_get_wrap_mode_sPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(TextureSamplerRef)>>(
          'filament_texture_sampler_get_wrap_mode_s');
  late final _filament_texture_sampler_get_wrap_mode_s =
      _filament_texture_sampler_get_wrap_mode_sPtr
          .asFunction<int Function(TextureSamplerRef)>();

  void filament_texture_sampler_set_wrap_mode_s(
    TextureSamplerRef sampler,
    int wrapMode,
  ) {
    return _filament_texture_sampler_set_wrap_mode_s(
      sampler,
      wrapMode,
    );
  }

  late final _filament_texture_sampler_set_wrap_mode_sPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(TextureSamplerRef, ffi.Int32)>>(
      'filament_texture_sampler_set_wrap_mode_s');
  late final _filament_texture_sampler_set_wrap_mode_s =
      _filament_texture_sampler_set_wrap_mode_sPtr
          .asFunction<void Function(TextureSamplerRef, int)>();

  int filament_texture_sampler_get_wrap_mode_t(
    TextureSamplerRef sampler,
  ) {
    return _filament_texture_sampler_get_wrap_mode_t(
      sampler,
    );
  }

  late final _filament_texture_sampler_get_wrap_mode_tPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(TextureSamplerRef)>>(
          'filament_texture_sampler_get_wrap_mode_t');
  late final _filament_texture_sampler_get_wrap_mode_t =
      _filament_texture_sampler_get_wrap_mode_tPtr
          .asFunction<int Function(TextureSamplerRef)>();

  void filament_texture_sampler_set_wrap_mode_t(
    TextureSamplerRef sampler,
    int wrapMode,
  ) {
    return _filament_texture_sampler_set_wrap_mode_t(
      sampler,
      wrapMode,
    );
  }

  late final _filament_texture_sampler_set_wrap_mode_tPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(TextureSamplerRef, ffi.Int32)>>(
      'filament_texture_sampler_set_wrap_mode_t');
  late final _filament_texture_sampler_set_wrap_mode_t =
      _filament_texture_sampler_set_wrap_mode_tPtr
          .asFunction<void Function(TextureSamplerRef, int)>();

  int filament_texture_sampler_get_wrap_mode_r(
    TextureSamplerRef sampler,
  ) {
    return _filament_texture_sampler_get_wrap_mode_r(
      sampler,
    );
  }

  late final _filament_texture_sampler_get_wrap_mode_rPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(TextureSamplerRef)>>(
          'filament_texture_sampler_get_wrap_mode_r');
  late final _filament_texture_sampler_get_wrap_mode_r =
      _filament_texture_sampler_get_wrap_mode_rPtr
          .asFunction<int Function(TextureSamplerRef)>();

  void filament_texture_sampler_set_wrap_mode_r(
    TextureSamplerRef sampler,
    int wrapMode,
  ) {
    return _filament_texture_sampler_set_wrap_mode_r(
      sampler,
      wrapMode,
    );
  }

  late final _filament_texture_sampler_set_wrap_mode_rPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(TextureSamplerRef, ffi.Int32)>>(
      'filament_texture_sampler_set_wrap_mode_r');
  late final _filament_texture_sampler_set_wrap_mode_r =
      _filament_texture_sampler_set_wrap_mode_rPtr
          .asFunction<void Function(TextureSamplerRef, int)>();

  int filament_texture_sampler_get_compare_mode(
    TextureSamplerRef sampler,
  ) {
    return _filament_texture_sampler_get_compare_mode(
      sampler,
    );
  }

  late final _filament_texture_sampler_get_compare_modePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(TextureSamplerRef)>>(
          'filament_texture_sampler_get_compare_mode');
  late final _filament_texture_sampler_get_compare_mode =
      _filament_texture_sampler_get_compare_modePtr
          .asFunction<int Function(TextureSamplerRef)>();

  void filament_texture_sampler_set_compare_mode(
    TextureSamplerRef sampler,
    int compareMode,
  ) {
    return _filament_texture_sampler_set_compare_mode(
      sampler,
      compareMode,
    );
  }

  late final _filament_texture_sampler_set_compare_modePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(TextureSamplerRef, ffi.Int32)>>(
      'filament_texture_sampler_set_compare_mode');
  late final _filament_texture_sampler_set_compare_mode =
      _filament_texture_sampler_set_compare_modePtr
          .asFunction<void Function(TextureSamplerRef, int)>();

  int filament_texture_sampler_get_compare_function(
    TextureSamplerRef sampler,
  ) {
    return _filament_texture_sampler_get_compare_function(
      sampler,
    );
  }

  late final _filament_texture_sampler_get_compare_functionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(TextureSamplerRef)>>(
          'filament_texture_sampler_get_compare_function');
  late final _filament_texture_sampler_get_compare_function =
      _filament_texture_sampler_get_compare_functionPtr
          .asFunction<int Function(TextureSamplerRef)>();

  void filament_texture_sampler_set_compare_function(
    TextureSamplerRef sampler,
    int compareFunction,
  ) {
    return _filament_texture_sampler_set_compare_function(
      sampler,
      compareFunction,
    );
  }

  late final _filament_texture_sampler_set_compare_functionPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(TextureSamplerRef, ffi.Int32)>>(
      'filament_texture_sampler_set_compare_function');
  late final _filament_texture_sampler_set_compare_function =
      _filament_texture_sampler_set_compare_functionPtr
          .asFunction<void Function(TextureSamplerRef, int)>();

  double filament_texture_sampler_get_ansiotropy(
    TextureSamplerRef sampler,
  ) {
    return _filament_texture_sampler_get_ansiotropy(
      sampler,
    );
  }

  late final _filament_texture_sampler_get_ansiotropyPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(TextureSamplerRef)>>(
          'filament_texture_sampler_get_ansiotropy');
  late final _filament_texture_sampler_get_ansiotropy =
      _filament_texture_sampler_get_ansiotropyPtr
          .asFunction<double Function(TextureSamplerRef)>();

  void filament_texture_sampler_set_ansiotropy(
    TextureSamplerRef sampler,
    double ansiotropy,
  ) {
    return _filament_texture_sampler_set_ansiotropy(
      sampler,
      ansiotropy,
    );
  }

  late final _filament_texture_sampler_set_ansiotropyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(TextureSamplerRef, ffi.Float)>>(
      'filament_texture_sampler_set_ansiotropy');
  late final _filament_texture_sampler_set_ansiotropy =
      _filament_texture_sampler_set_ansiotropyPtr
          .asFunction<void Function(TextureSamplerRef, double)>();

  /// TransformManager
  int filament_transform_manager_has_component(
    TransformManagerRef manager,
    int entity,
  ) {
    return _filament_transform_manager_has_component(
      manager,
      entity,
    );
  }

  late final _filament_transform_manager_has_componentPtr = _lookup<
          ffi.NativeFunction<bool Function(TransformManagerRef, ffi.Int32)>>(
      'filament_transform_manager_has_component');
  late final _filament_transform_manager_has_component =
      _filament_transform_manager_has_componentPtr
          .asFunction<int Function(TransformManagerRef, int)>();

  int filament_transform_manager_get_instance(
    TransformManagerRef manager,
    int entity,
  ) {
    return _filament_transform_manager_get_instance(
      manager,
      entity,
    );
  }

  late final _filament_transform_manager_get_instancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(TransformManagerRef,
              ffi.Int32)>>('filament_transform_manager_get_instance');
  late final _filament_transform_manager_get_instance =
      _filament_transform_manager_get_instancePtr
          .asFunction<int Function(TransformManagerRef, int)>();

  int filament_transform_manager_create(
    TransformManagerRef manager,
    int entity,
  ) {
    return _filament_transform_manager_create(
      manager,
      entity,
    );
  }

  late final _filament_transform_manager_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(TransformManagerRef,
              ffi.Int32)>>('filament_transform_manager_create');
  late final _filament_transform_manager_create =
      _filament_transform_manager_createPtr
          .asFunction<int Function(TransformManagerRef, int)>();

  int filament_transform_manager_create_array(
    TransformManagerRef manager,
    int entity,
    int parent,
    ffi.Pointer<ffi.Float> localTransform,
  ) {
    return _filament_transform_manager_create_array(
      manager,
      entity,
      parent,
      localTransform,
    );
  }

  late final _filament_transform_manager_create_arrayPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(TransformManagerRef, ffi.Int32, ffi.Int32,
                  ffi.Pointer<ffi.Float>)>>(
      'filament_transform_manager_create_array');
  late final _filament_transform_manager_create_array =
      _filament_transform_manager_create_arrayPtr.asFunction<
          int Function(
              TransformManagerRef, int, int, ffi.Pointer<ffi.Float>)>();

  int filament_transform_manager_create_array_fp64(
    TransformManagerRef manager,
    int entity,
    int parent,
    ffi.Pointer<ffi.Double> localTransform,
  ) {
    return _filament_transform_manager_create_array_fp64(
      manager,
      entity,
      parent,
      localTransform,
    );
  }

  late final _filament_transform_manager_create_array_fp64Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(TransformManagerRef, ffi.Int32, ffi.Int32,
                  ffi.Pointer<ffi.Double>)>>(
      'filament_transform_manager_create_array_fp64');
  late final _filament_transform_manager_create_array_fp64 =
      _filament_transform_manager_create_array_fp64Ptr.asFunction<
          int Function(
              TransformManagerRef, int, int, ffi.Pointer<ffi.Double>)>();

  void filament_transform_manager_destroy(
    TransformManagerRef manager,
    int entity,
  ) {
    return _filament_transform_manager_destroy(
      manager,
      entity,
    );
  }

  late final _filament_transform_manager_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(TransformManagerRef,
              ffi.Int32)>>('filament_transform_manager_destroy');
  late final _filament_transform_manager_destroy =
      _filament_transform_manager_destroyPtr
          .asFunction<void Function(TransformManagerRef, int)>();

  void filament_transform_manager_set_parent(
    TransformManagerRef manager,
    int i,
    int newParent,
  ) {
    return _filament_transform_manager_set_parent(
      manager,
      i,
      newParent,
    );
  }

  late final _filament_transform_manager_set_parentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(TransformManagerRef, ffi.Int32,
              ffi.Int32)>>('filament_transform_manager_set_parent');
  late final _filament_transform_manager_set_parent =
      _filament_transform_manager_set_parentPtr
          .asFunction<void Function(TransformManagerRef, int, int)>();

  int filament_transform_manager_get_parent(
    TransformManagerRef manager,
    int i,
  ) {
    return _filament_transform_manager_get_parent(
      manager,
      i,
    );
  }

  late final _filament_transform_manager_get_parentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(TransformManagerRef,
              ffi.Int32)>>('filament_transform_manager_get_parent');
  late final _filament_transform_manager_get_parent =
      _filament_transform_manager_get_parentPtr
          .asFunction<int Function(TransformManagerRef, int)>();

  void filament_transform_manager_set_transform(
    TransformManagerRef manager,
    int i,
    ffi.Pointer<ffi.Float> localTransform,
  ) {
    return _filament_transform_manager_set_transform(
      manager,
      i,
      localTransform,
    );
  }

  late final _filament_transform_manager_set_transformPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  TransformManagerRef, ffi.Int32, ffi.Pointer<ffi.Float>)>>(
      'filament_transform_manager_set_transform');
  late final _filament_transform_manager_set_transform =
      _filament_transform_manager_set_transformPtr.asFunction<
          void Function(TransformManagerRef, int, ffi.Pointer<ffi.Float>)>();

  void filament_transform_manager_set_transform_fp64(
    TransformManagerRef manager,
    int i,
    ffi.Pointer<ffi.Double> localTransform,
  ) {
    return _filament_transform_manager_set_transform_fp64(
      manager,
      i,
      localTransform,
    );
  }

  late final _filament_transform_manager_set_transform_fp64Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  TransformManagerRef, ffi.Int32, ffi.Pointer<ffi.Double>)>>(
      'filament_transform_manager_set_transform_fp64');
  late final _filament_transform_manager_set_transform_fp64 =
      _filament_transform_manager_set_transform_fp64Ptr.asFunction<
          void Function(TransformManagerRef, int, ffi.Pointer<ffi.Double>)>();

  void filament_transform_manager_get_transform(
    TransformManagerRef manager,
    int i,
    ffi.Pointer<ffi.Float> outLocalTransform,
  ) {
    return _filament_transform_manager_get_transform(
      manager,
      i,
      outLocalTransform,
    );
  }

  late final _filament_transform_manager_get_transformPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  TransformManagerRef, ffi.Int32, ffi.Pointer<ffi.Float>)>>(
      'filament_transform_manager_get_transform');
  late final _filament_transform_manager_get_transform =
      _filament_transform_manager_get_transformPtr.asFunction<
          void Function(TransformManagerRef, int, ffi.Pointer<ffi.Float>)>();

  void filament_transform_manager_get_transform_fp64(
    TransformManagerRef manager,
    int i,
    ffi.Pointer<ffi.Double> outLocalTransform,
  ) {
    return _filament_transform_manager_get_transform_fp64(
      manager,
      i,
      outLocalTransform,
    );
  }

  late final _filament_transform_manager_get_transform_fp64Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  TransformManagerRef, ffi.Int32, ffi.Pointer<ffi.Double>)>>(
      'filament_transform_manager_get_transform_fp64');
  late final _filament_transform_manager_get_transform_fp64 =
      _filament_transform_manager_get_transform_fp64Ptr.asFunction<
          void Function(TransformManagerRef, int, ffi.Pointer<ffi.Double>)>();

  void filament_transform_manager_get_world_transform(
    TransformManagerRef manager,
    int i,
    ffi.Pointer<ffi.Float> outWorldTransform,
  ) {
    return _filament_transform_manager_get_world_transform(
      manager,
      i,
      outWorldTransform,
    );
  }

  late final _filament_transform_manager_get_world_transformPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  TransformManagerRef, ffi.Int32, ffi.Pointer<ffi.Float>)>>(
      'filament_transform_manager_get_world_transform');
  late final _filament_transform_manager_get_world_transform =
      _filament_transform_manager_get_world_transformPtr.asFunction<
          void Function(TransformManagerRef, int, ffi.Pointer<ffi.Float>)>();

  void filament_transform_manager_get_world_transform_fp64(
    TransformManagerRef manager,
    int i,
    ffi.Pointer<ffi.Double> outWorldTransform,
  ) {
    return _filament_transform_manager_get_world_transform_fp64(
      manager,
      i,
      outWorldTransform,
    );
  }

  late final _filament_transform_manager_get_world_transform_fp64Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  TransformManagerRef, ffi.Int32, ffi.Pointer<ffi.Double>)>>(
      'filament_transform_manager_get_world_transform_fp64');
  late final _filament_transform_manager_get_world_transform_fp64 =
      _filament_transform_manager_get_world_transform_fp64Ptr.asFunction<
          void Function(TransformManagerRef, int, ffi.Pointer<ffi.Double>)>();

  void filament_transform_manager_open_local_tranform_transaction(
    TransformManagerRef manager,
  ) {
    return _filament_transform_manager_open_local_tranform_transaction(
      manager,
    );
  }

  late final _filament_transform_manager_open_local_tranform_transactionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(TransformManagerRef)>>(
          'filament_transform_manager_open_local_tranform_transaction');
  late final _filament_transform_manager_open_local_tranform_transaction =
      _filament_transform_manager_open_local_tranform_transactionPtr
          .asFunction<void Function(TransformManagerRef)>();

  void filament_transform_manager_commit_local_transform_transaction(
    TransformManagerRef manager,
  ) {
    return _filament_transform_manager_commit_local_transform_transaction(
      manager,
    );
  }

  late final _filament_transform_manager_commit_local_transform_transactionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(TransformManagerRef)>>(
          'filament_transform_manager_commit_local_transform_transaction');
  late final _filament_transform_manager_commit_local_transform_transaction =
      _filament_transform_manager_commit_local_transform_transactionPtr
          .asFunction<void Function(TransformManagerRef)>();

  void filament_transform_manager_set_accurate_translations_enabled(
    TransformManagerRef manager,
    int enabled,
  ) {
    return _filament_transform_manager_set_accurate_translations_enabled(
      manager,
      enabled,
    );
  }

  late final _filament_transform_manager_set_accurate_translations_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(TransformManagerRef, bool)>>(
          'filament_transform_manager_set_accurate_translations_enabled');
  late final _filament_transform_manager_set_accurate_translations_enabled =
      _filament_transform_manager_set_accurate_translations_enabledPtr
          .asFunction<void Function(TransformManagerRef, int)>();

  int filament_transform_manager_get_accurage_translations_enabled(
    TransformManagerRef manager,
  ) {
    return _filament_transform_manager_get_accurage_translations_enabled(
      manager,
    );
  }

  late final _filament_transform_manager_get_accurage_translations_enabledPtr =
      _lookup<ffi.NativeFunction<bool Function(TransformManagerRef)>>(
          'filament_transform_manager_get_accurage_translations_enabled');
  late final _filament_transform_manager_get_accurage_translations_enabled =
      _filament_transform_manager_get_accurage_translations_enabledPtr
          .asFunction<int Function(TransformManagerRef)>();

  /// View
  ffi.Pointer<ffi.Int8> filament_view_get_name(
    ViewRef view,
  ) {
    return _filament_view_get_name(
      view,
    );
  }

  late final _filament_view_get_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ViewRef)>>(
          'filament_view_get_name');
  late final _filament_view_get_name = _filament_view_get_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ViewRef)>();

  void filament_view_set_name(
    ViewRef view,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _filament_view_set_name(
      view,
      name,
    );
  }

  late final _filament_view_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ViewRef, ffi.Pointer<ffi.Int8>)>>('filament_view_set_name');
  late final _filament_view_set_name = _filament_view_set_namePtr
      .asFunction<void Function(ViewRef, ffi.Pointer<ffi.Int8>)>();

  void filament_view_set_scene(
    ViewRef view,
    SceneRef scene,
  ) {
    return _filament_view_set_scene(
      view,
      scene,
    );
  }

  late final _filament_view_set_scenePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ViewRef, SceneRef)>>(
          'filament_view_set_scene');
  late final _filament_view_set_scene = _filament_view_set_scenePtr
      .asFunction<void Function(ViewRef, SceneRef)>();

  void filament_view_set_camera(
    ViewRef view,
    CameraRef camera,
  ) {
    return _filament_view_set_camera(
      view,
      camera,
    );
  }

  late final _filament_view_set_cameraPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ViewRef, CameraRef)>>(
          'filament_view_set_camera');
  late final _filament_view_set_camera = _filament_view_set_cameraPtr
      .asFunction<void Function(ViewRef, CameraRef)>();

  void filament_view_set_viewport(
    ViewRef view,
    int left,
    int bottom,
    int width,
    int height,
  ) {
    return _filament_view_set_viewport(
      view,
      left,
      bottom,
      width,
      height,
    );
  }

  late final _filament_view_set_viewportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ViewRef, ffi.Int32, ffi.Int32, ffi.Int32,
              ffi.Int32)>>('filament_view_set_viewport');
  late final _filament_view_set_viewport = _filament_view_set_viewportPtr
      .asFunction<void Function(ViewRef, int, int, int, int)>();

  void filament_view_set_blendmode(
    ViewRef view,
    int blendMode,
  ) {
    return _filament_view_set_blendmode(
      view,
      blendMode,
    );
  }

  late final _filament_view_set_blendmodePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ViewRef, ffi.Int32)>>(
          'filament_view_set_blendmode');
  late final _filament_view_set_blendmode =
      _filament_view_set_blendmodePtr.asFunction<void Function(ViewRef, int)>();

  void filament_view_set_visible_layers(
    ViewRef view,
    int select,
    int values,
  ) {
    return _filament_view_set_visible_layers(
      view,
      select,
      values,
    );
  }

  late final _filament_view_set_visible_layersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ViewRef, ffi.Uint8, ffi.Uint8)>>(
      'filament_view_set_visible_layers');
  late final _filament_view_set_visible_layers =
      _filament_view_set_visible_layersPtr
          .asFunction<void Function(ViewRef, int, int)>();

  void filament_view_set_shadowing_enabled(
    ViewRef view,
    int enabled,
  ) {
    return _filament_view_set_shadowing_enabled(
      view,
      enabled,
    );
  }

  late final _filament_view_set_shadowing_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ViewRef, bool)>>(
          'filament_view_set_shadowing_enabled');
  late final _filament_view_set_shadowing_enabled =
      _filament_view_set_shadowing_enabledPtr
          .asFunction<void Function(ViewRef, int)>();

  int filament_view_get_shadowing_enabled(
    ViewRef view,
  ) {
    return _filament_view_get_shadowing_enabled(
      view,
    );
  }

  late final _filament_view_get_shadowing_enabledPtr =
      _lookup<ffi.NativeFunction<bool Function(ViewRef)>>(
          'filament_view_get_shadowing_enabled');
  late final _filament_view_get_shadowing_enabled =
      _filament_view_get_shadowing_enabledPtr
          .asFunction<int Function(ViewRef)>();

  void filament_view_set_screenspace_refraction_enabled(
    ViewRef view,
    int enabled,
  ) {
    return _filament_view_set_screenspace_refraction_enabled(
      view,
      enabled,
    );
  }

  late final _filament_view_set_screenspace_refraction_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ViewRef, bool)>>(
          'filament_view_set_screenspace_refraction_enabled');
  late final _filament_view_set_screenspace_refraction_enabled =
      _filament_view_set_screenspace_refraction_enabledPtr
          .asFunction<void Function(ViewRef, int)>();

  int filament_view_get_screenspace_refraction_enabled(
    ViewRef view,
  ) {
    return _filament_view_get_screenspace_refraction_enabled(
      view,
    );
  }

  late final _filament_view_get_screenspace_refraction_enabledPtr =
      _lookup<ffi.NativeFunction<bool Function(ViewRef)>>(
          'filament_view_get_screenspace_refraction_enabled');
  late final _filament_view_get_screenspace_refraction_enabled =
      _filament_view_get_screenspace_refraction_enabledPtr
          .asFunction<int Function(ViewRef)>();

  void filament_view_set_render_target(
    ViewRef view,
    RenderTargetRef renderTarget,
  ) {
    return _filament_view_set_render_target(
      view,
      renderTarget,
    );
  }

  late final _filament_view_set_render_targetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ViewRef, RenderTargetRef)>>(
          'filament_view_set_render_target');
  late final _filament_view_set_render_target =
      _filament_view_set_render_targetPtr
          .asFunction<void Function(ViewRef, RenderTargetRef)>();

  void filament_view_set_antialiasing(
    ViewRef view,
    int type,
  ) {
    return _filament_view_set_antialiasing(
      view,
      type,
    );
  }

  late final _filament_view_set_antialiasingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ViewRef, ffi.Int32)>>(
          'filament_view_set_antialiasing');
  late final _filament_view_set_antialiasing =
      _filament_view_set_antialiasingPtr
          .asFunction<void Function(ViewRef, int)>();

  int filament_view_get_antialiasing(
    ViewRef view,
  ) {
    return _filament_view_get_antialiasing(
      view,
    );
  }

  late final _filament_view_get_antialiasingPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ViewRef)>>(
          'filament_view_get_antialiasing');
  late final _filament_view_get_antialiasing =
      _filament_view_get_antialiasingPtr.asFunction<int Function(ViewRef)>();

  void filament_view_set_msaa_options(
    ViewRef view,
    int enabled,
    int sampleCount,
    int customResolve,
  ) {
    return _filament_view_set_msaa_options(
      view,
      enabled,
      sampleCount,
      customResolve,
    );
  }

  late final _filament_view_set_msaa_optionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ViewRef, bool, ffi.Int32,
              bool)>>('filament_view_set_msaa_options');
  late final _filament_view_set_msaa_options =
      _filament_view_set_msaa_optionsPtr
          .asFunction<void Function(ViewRef, int, int, int)>();

  void filament_view_set_taa_options(
    ViewRef view,
    double feedback,
    double filterWidth,
    int enabled,
  ) {
    return _filament_view_set_taa_options(
      view,
      feedback,
      filterWidth,
      enabled,
    );
  }

  late final _filament_view_set_taa_optionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ViewRef, ffi.Float, ffi.Float,
              bool)>>('filament_view_set_taa_options');
  late final _filament_view_set_taa_options = _filament_view_set_taa_optionsPtr
      .asFunction<void Function(ViewRef, double, double, int)>();

  void filament_view_set_color_grading(
    ViewRef view,
    ColorGradingRef colorGrading,
  ) {
    return _filament_view_set_color_grading(
      view,
      colorGrading,
    );
  }

  late final _filament_view_set_color_gradingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ViewRef, ColorGradingRef)>>(
          'filament_view_set_color_grading');
  late final _filament_view_set_color_grading =
      _filament_view_set_color_gradingPtr
          .asFunction<void Function(ViewRef, ColorGradingRef)>();

  void filament_view_set_dithering(
    ViewRef view,
    int dithering,
  ) {
    return _filament_view_set_dithering(
      view,
      dithering,
    );
  }

  late final _filament_view_set_ditheringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ViewRef, ffi.Int32)>>(
          'filament_view_set_dithering');
  late final _filament_view_set_dithering =
      _filament_view_set_ditheringPtr.asFunction<void Function(ViewRef, int)>();

  int filament_view_get_dithering(
    ViewRef view,
  ) {
    return _filament_view_get_dithering(
      view,
    );
  }

  late final _filament_view_get_ditheringPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ViewRef)>>(
          'filament_view_get_dithering');
  late final _filament_view_get_dithering =
      _filament_view_get_ditheringPtr.asFunction<int Function(ViewRef)>();

  void filament_view_set_dynamic_resolution_options(
    ViewRef view,
    int enabled,
    int homogenousScaling,
    double minScale,
    double maxScale,
    double sharpness,
    int quality,
  ) {
    return _filament_view_set_dynamic_resolution_options(
      view,
      enabled,
      homogenousScaling,
      minScale,
      maxScale,
      sharpness,
      quality,
    );
  }

  late final _filament_view_set_dynamic_resolution_optionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ViewRef,
              bool,
              bool,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Int32)>>('filament_view_set_dynamic_resolution_options');
  late final _filament_view_set_dynamic_resolution_options =
      _filament_view_set_dynamic_resolution_optionsPtr.asFunction<
          void Function(ViewRef, int, int, double, double, double, int)>();

  void filament_view_set_render_quality(
    ViewRef view,
    int hdrColorBufferQuality,
  ) {
    return _filament_view_set_render_quality(
      view,
      hdrColorBufferQuality,
    );
  }

  late final _filament_view_set_render_qualityPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ViewRef, ffi.Int32)>>(
          'filament_view_set_render_quality');
  late final _filament_view_set_render_quality =
      _filament_view_set_render_qualityPtr
          .asFunction<void Function(ViewRef, int)>();

  void filament_view_set_post_processing_enabled(
    ViewRef view,
    int enabled,
  ) {
    return _filament_view_set_post_processing_enabled(
      view,
      enabled,
    );
  }

  late final _filament_view_set_post_processing_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ViewRef, bool)>>(
          'filament_view_set_post_processing_enabled');
  late final _filament_view_set_post_processing_enabled =
      _filament_view_set_post_processing_enabledPtr
          .asFunction<void Function(ViewRef, int)>();

  int filament_view_get_post_processing_enabled(
    ViewRef view,
  ) {
    return _filament_view_get_post_processing_enabled(
      view,
    );
  }

  late final _filament_view_get_post_processing_enabledPtr =
      _lookup<ffi.NativeFunction<bool Function(ViewRef)>>(
          'filament_view_get_post_processing_enabled');
  late final _filament_view_get_post_processing_enabled =
      _filament_view_get_post_processing_enabledPtr
          .asFunction<int Function(ViewRef)>();

  void filament_view_set_front_face_winding_inverted(
    ViewRef view,
    int inverted,
  ) {
    return _filament_view_set_front_face_winding_inverted(
      view,
      inverted,
    );
  }

  late final _filament_view_set_front_face_winding_invertedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ViewRef, bool)>>(
          'filament_view_set_front_face_winding_inverted');
  late final _filament_view_set_front_face_winding_inverted =
      _filament_view_set_front_face_winding_invertedPtr
          .asFunction<void Function(ViewRef, int)>();

  int filament_view_get_front_face_winding_inverted(
    ViewRef view,
  ) {
    return _filament_view_get_front_face_winding_inverted(
      view,
    );
  }

  late final _filament_view_get_front_face_winding_invertedPtr =
      _lookup<ffi.NativeFunction<bool Function(ViewRef)>>(
          'filament_view_get_front_face_winding_inverted');
  late final _filament_view_get_front_face_winding_inverted =
      _filament_view_get_front_face_winding_invertedPtr
          .asFunction<int Function(ViewRef)>();

  void filament_view_set_dynamic_lighting_options(
    ViewRef view,
    double zLightNear,
    double zLightFar,
  ) {
    return _filament_view_set_dynamic_lighting_options(
      view,
      zLightNear,
      zLightFar,
    );
  }

  late final _filament_view_set_dynamic_lighting_optionsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ViewRef, ffi.Float, ffi.Float)>>(
      'filament_view_set_dynamic_lighting_options');
  late final _filament_view_set_dynamic_lighting_options =
      _filament_view_set_dynamic_lighting_optionsPtr
          .asFunction<void Function(ViewRef, double, double)>();

  void filament_view_set_shadow_type(
    ViewRef view,
    int shadowType,
  ) {
    return _filament_view_set_shadow_type(
      view,
      shadowType,
    );
  }

  late final _filament_view_set_shadow_typePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ViewRef, ffi.Int32)>>(
          'filament_view_set_shadow_type');
  late final _filament_view_set_shadow_type = _filament_view_set_shadow_typePtr
      .asFunction<void Function(ViewRef, int)>();

  void filament_view_set_vsm_shadow_options(
    ViewRef view,
    int ansiotropy,
    int mipmapping,
    double minVarianceScale,
    double lightBleedReduction,
  ) {
    return _filament_view_set_vsm_shadow_options(
      view,
      ansiotropy,
      mipmapping,
      minVarianceScale,
      lightBleedReduction,
    );
  }

  late final _filament_view_set_vsm_shadow_optionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ViewRef, ffi.Int32, bool, ffi.Float,
              ffi.Float)>>('filament_view_set_vsm_shadow_options');
  late final _filament_view_set_vsm_shadow_options =
      _filament_view_set_vsm_shadow_optionsPtr
          .asFunction<void Function(ViewRef, int, int, double, double)>();

  void filament_view_set_soft_shadow_options(
    ViewRef view,
    double penumbraScale,
    double penumbraRatioScale,
  ) {
    return _filament_view_set_soft_shadow_options(
      view,
      penumbraScale,
      penumbraRatioScale,
    );
  }

  late final _filament_view_set_soft_shadow_optionsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ViewRef, ffi.Float, ffi.Float)>>(
      'filament_view_set_soft_shadow_options');
  late final _filament_view_set_soft_shadow_options =
      _filament_view_set_soft_shadow_optionsPtr
          .asFunction<void Function(ViewRef, double, double)>();

  void filament_view_set_ambient_occlusion_options(
    ViewRef view,
    double radius,
    double bias,
    double power,
    double resolution,
    double intensity,
    double bilateralThreshold,
    int quality,
    int lowPassFilter,
    int upsampling,
    int enabled,
    int bentNormals,
    double minHorizonAngleRad,
  ) {
    return _filament_view_set_ambient_occlusion_options(
      view,
      radius,
      bias,
      power,
      resolution,
      intensity,
      bilateralThreshold,
      quality,
      lowPassFilter,
      upsampling,
      enabled,
      bentNormals,
      minHorizonAngleRad,
    );
  }

  late final _filament_view_set_ambient_occlusion_optionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ViewRef,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              bool,
              bool,
              ffi.Float)>>('filament_view_set_ambient_occlusion_options');
  late final _filament_view_set_ambient_occlusion_options =
      _filament_view_set_ambient_occlusion_optionsPtr.asFunction<
          void Function(ViewRef, double, double, double, double, double, double,
              int, int, int, int, int, double)>();

  void filament_view_set_ssct_options(
    ViewRef view,
    double ssctLightConeRad,
    double ssctStartTraceDistance,
    double ssctContactDistanceMax,
    double ssctIntensity,
    double v,
    double v1,
    double v2,
    double ssctDepthBias,
    double ssctDepthSlopeBias,
    int ssctSampleCount,
    int ssctRayCount,
    int ssctEnabled,
  ) {
    return _filament_view_set_ssct_options(
      view,
      ssctLightConeRad,
      ssctStartTraceDistance,
      ssctContactDistanceMax,
      ssctIntensity,
      v,
      v1,
      v2,
      ssctDepthBias,
      ssctDepthSlopeBias,
      ssctSampleCount,
      ssctRayCount,
      ssctEnabled,
    );
  }

  late final _filament_view_set_ssct_optionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ViewRef,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Int32,
              ffi.Int32,
              bool)>>('filament_view_set_ssct_options');
  late final _filament_view_set_ssct_options =
      _filament_view_set_ssct_optionsPtr.asFunction<
          void Function(ViewRef, double, double, double, double, double, double,
              double, double, double, int, int, int)>();

  void filament_view_set_bloom_options(
    ViewRef view,
    TextureRef dirtTexture,
    double dirtStrength,
    double strength,
    int resolution,
    double anamorphism,
    int levels,
    int blendMode,
    int threshold,
    int enabled,
    double highlight,
    int lensFlare,
    int starburst,
    double chromaticAberration,
    int ghostCount,
    double ghostSpacing,
    double ghostThreshold,
    double haloThickness,
    double haloRadius,
    double haloThreshold,
  ) {
    return _filament_view_set_bloom_options(
      view,
      dirtTexture,
      dirtStrength,
      strength,
      resolution,
      anamorphism,
      levels,
      blendMode,
      threshold,
      enabled,
      highlight,
      lensFlare,
      starburst,
      chromaticAberration,
      ghostCount,
      ghostSpacing,
      ghostThreshold,
      haloThickness,
      haloRadius,
      haloThreshold,
    );
  }

  late final _filament_view_set_bloom_optionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ViewRef,
              TextureRef,
              ffi.Float,
              ffi.Float,
              ffi.Int32,
              ffi.Float,
              ffi.Int32,
              ffi.Int32,
              bool,
              bool,
              ffi.Float,
              bool,
              bool,
              ffi.Float,
              ffi.Int32,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('filament_view_set_bloom_options');
  late final _filament_view_set_bloom_options =
      _filament_view_set_bloom_optionsPtr.asFunction<
          void Function(
              ViewRef,
              TextureRef,
              double,
              double,
              int,
              double,
              int,
              int,
              int,
              int,
              double,
              int,
              int,
              double,
              int,
              double,
              double,
              double,
              double,
              double)>();

  void filament_view_set_vignette_options(
    ViewRef view,
    double midPoint,
    double roundness,
    double feather,
    double r,
    double g,
    double b,
    double a,
    int enabled,
  ) {
    return _filament_view_set_vignette_options(
      view,
      midPoint,
      roundness,
      feather,
      r,
      g,
      b,
      a,
      enabled,
    );
  }

  late final _filament_view_set_vignette_optionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ViewRef,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              bool)>>('filament_view_set_vignette_options');
  late final _filament_view_set_vignette_options =
      _filament_view_set_vignette_optionsPtr.asFunction<
          void Function(ViewRef, double, double, double, double, double, double,
              double, int)>();

  void filament_view_set_fog_options(
    ViewRef view,
    double distance,
    double maximumOpacity,
    double height,
    double heightFalloff,
    double v,
    double v1,
    double v2,
    double density,
    double inScatteringStart,
    double inScatteringSize,
    int fogColorFromIbl,
    int enabled,
  ) {
    return _filament_view_set_fog_options(
      view,
      distance,
      maximumOpacity,
      height,
      heightFalloff,
      v,
      v1,
      v2,
      density,
      inScatteringStart,
      inScatteringSize,
      fogColorFromIbl,
      enabled,
    );
  }

  late final _filament_view_set_fog_optionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ViewRef,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              bool,
              bool)>>('filament_view_set_fog_options');
  late final _filament_view_set_fog_options =
      _filament_view_set_fog_optionsPtr.asFunction<
          void Function(ViewRef, double, double, double, double, double, double,
              double, double, double, double, int, int)>();

  void filament_view_set_depth_of_field_options(
    ViewRef view,
    double cocScale,
    double maxApertureDiameter,
    int enabled,
    int filter,
    int nativeResolution,
    int foregroundRingCount,
    int backgroundRingCount,
    int fastGatherRingCount,
    int maxForegroundCOC,
    int maxBackgroundCOC,
  ) {
    return _filament_view_set_depth_of_field_options(
      view,
      cocScale,
      maxApertureDiameter,
      enabled,
      filter,
      nativeResolution,
      foregroundRingCount,
      backgroundRingCount,
      fastGatherRingCount,
      maxForegroundCOC,
      maxBackgroundCOC,
    );
  }

  late final _filament_view_set_depth_of_field_optionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ViewRef,
              ffi.Float,
              ffi.Float,
              bool,
              ffi.Int32,
              bool,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>>('filament_view_set_depth_of_field_options');
  late final _filament_view_set_depth_of_field_options =
      _filament_view_set_depth_of_field_optionsPtr.asFunction<
          void Function(ViewRef, double, double, int, int, int, int, int, int,
              int, int)>();
}

class BufferObjectBuilder extends ffi.Opaque {}

class BufferObject extends ffi.Opaque {}

class Camera extends ffi.Opaque {}

class ColorGrading extends ffi.Opaque {}

class Engine extends ffi.Opaque {}

class EntityManager extends ffi.Opaque {}

class Fence extends ffi.Opaque {}

class IndexBuffer extends ffi.Opaque {}

class IndirectLight extends ffi.Opaque {}

class LightManager extends ffi.Opaque {}

class Material extends ffi.Opaque {}

class MaterialInstance extends ffi.Opaque {}

class NativeSurface extends ffi.Opaque {}

class Parameter extends ffi.Opaque {}

class Renderer extends ffi.Opaque {}

class RenderTarget extends ffi.Opaque {}

class Scene extends ffi.Opaque {}

class Skybox extends ffi.Opaque {}

class SwapChain extends ffi.Opaque {}

class Texture extends ffi.Opaque {}

class TextureSampler extends ffi.Opaque {}

class TransformManager extends ffi.Opaque {}

class View extends ffi.Opaque {}

/// Math types
class Vector3 extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;

  @ffi.Float()
  external double z;
}

class Vector4 extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;

  @ffi.Float()
  external double z;

  @ffi.Float()
  external double w;
}

class Matrix3x3 extends ffi.Opaque {}

class Matrix4x4 extends ffi.Opaque {}

/// Common types
class filament_viewport_t extends ffi.Struct {
  @ffi.Int32()
  external int left;

  @ffi.Int32()
  external int bottom;

  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;
}

typedef EngineRef = ffi.Pointer<Engine>;
typedef EntityManagerRef = ffi.Pointer<EntityManager>;
typedef SwapChainRef = ffi.Pointer<SwapChain>;
typedef ViewRef = ffi.Pointer<View>;

/// Renderer
class filament_display_info_t extends ffi.Struct {
  @ffi.Float()
  external double refreshRate;

  @ffi.Int64()
  external int presentationDeadlineNanos;

  @ffi.Int64()
  external int vsyncOffsetNanos;
}

class filament_framerate_options_t extends ffi.Struct {
  @ffi.Float()
  external double interval;

  @ffi.Float()
  external double headRoomRatio;

  @ffi.Float()
  external double scaleRate;

  @ffi.Int32()
  external int history;
}

class filament_clear_options_t extends ffi.Struct {
  external Vector4 clearColor;

  @bool()
  external int clear;

  @bool()
  external int discard;
}

typedef bool = ffi.Uint8;
typedef RendererRef = ffi.Pointer<Renderer>;
typedef CameraRef = ffi.Pointer<Camera>;
typedef SceneRef = ffi.Pointer<Scene>;
typedef SkyboxRef = ffi.Pointer<Skybox>;
typedef IndirectLightRef = ffi.Pointer<IndirectLight>;
typedef FenceRef = ffi.Pointer<Fence>;
typedef BufferObjectBuilderRef = ffi.Pointer<BufferObjectBuilder>;
typedef BufferObjectRef = ffi.Pointer<BufferObject>;
typedef ColorGradingRef = ffi.Pointer<ColorGrading>;
typedef IndexBufferRef = ffi.Pointer<IndexBuffer>;
typedef TextureRef = ffi.Pointer<Texture>;
typedef LightManagerRef = ffi.Pointer<LightManager>;
typedef MaterialRef = ffi.Pointer<Material>;
typedef MaterialInstanceRef = ffi.Pointer<MaterialInstance>;
typedef ParameterRef = ffi.Pointer<Parameter>;
typedef TextureSamplerRef = ffi.Pointer<TextureSampler>;
typedef NativeSurfaceRef = ffi.Pointer<NativeSurface>;

/// RenderTarget
class filament_render_target_attachment_config_t extends ffi.Struct {
  @ffi.Int32()
  external int attachment;

  external TextureRef texture;

  @ffi.Int32()
  external int mipLevel;

  @ffi.Int32()
  external int cubemapFace;

  @ffi.Int32()
  external int layer;
}

typedef RenderTargetRef = ffi.Pointer<RenderTarget>;
typedef TransformManagerRef = ffi.Pointer<TransformManager>;
